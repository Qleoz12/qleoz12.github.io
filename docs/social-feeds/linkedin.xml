<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dann Brown Adventures</title>
    <description>I am an Senior Fullstack Software Developer working in my skills and learning new stuffs about tech daily</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 13 Nov 2023 22:45:53 -0500</pubDate>
    <lastBuildDate>Mon, 13 Nov 2023 22:45:53 -0500</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
    
    

    

    
        

        

        
        <item>
            <title>React Handling API request race</title>
            <description>&lt;h1 id=&quot;in-progress&quot;&gt;in progress..&lt;/h1&gt;
</description>
            <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
            <link>/devops/mysql/ha/react-Handling-API-request-race/</link>
            <guid isPermaLink="true">/devops/mysql/ha/react-Handling-API-request-race/</guid>
            
            
            <category>devops/mysql/HA</category>
            
        </item>
        
    
        

        

        
        <item>
            <title>Mysql HA- high Availibity</title>
            <description>&lt;h1 id=&quot;mysql-ha&quot;&gt;Mysql HA&lt;/h1&gt;

&lt;p&gt;mysql had capabilities, that allow us to create a componentes for get high availability 
of our database, to achieve that we have this kind of tools, when we are using&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/group-replication.html&quot;&gt;mysql group replication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html&quot;&gt;mysql innoDB Cluster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html&quot;&gt;mysql NDB Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for this entry, I will expose you how use innoDB for create a failure tolerant database componenet&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;h3 id=&quot;high-availibity&quot;&gt;high availibity&lt;/h3&gt;
&lt;p&gt;High availability refers to the ability of a system to remain accessible and 
operational for an extended period, without any significant downtime or service 
interruptions. In the context of databases like MySQL, achieving high availability 
ensures that the database remains accessible even in the face of hardware failures,
 software issues, or maintenance activities. High availability is essential for 
 critical applications where downtime can result in financial losses, decreased 
 user satisfaction, and other negative consequences.&lt;/p&gt;

&lt;h3 id=&quot;scaling-features&quot;&gt;scaling features&lt;/h3&gt;
&lt;p&gt;Scaling features in the context of MySQL InnoDB refer to the ability of the database to handle increased workloads and data without sacrificing performance. There are two primary types of scaling:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vertical Scaling (Scaling Up):&lt;/strong&gt; This involves upgrading the hardware resources of the server hosting the MySQL database, such as increasing CPU power, RAM, or storage capacity. While vertical scaling can provide a performance boost, it has limitations and may eventually become expensive or impractical when reaching the hardware’s maximum capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Horizontal Scaling (Scaling Out):&lt;/strong&gt; This involves distributing the database load across multiple servers. With horizontal scaling, you can add more servers to handle the increased workload and data. It provides better scalability compared to vertical scaling since you can keep adding servers as needed. However, horizontal scaling also introduces complexities related to data distribution and synchronization.&lt;/p&gt;

&lt;p&gt;To achieve high availability and scaling features with MySQL InnoDB, several strategies and technologies can be used:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Replication:&lt;/strong&gt; MySQL supports replication, where one server (the master) is designated as the primary source of data changes, and one or more servers (the replicas) replicate the changes from the master. This provides improved read scalability and some degree of high availability since the replicas can be used for read-heavy workloads or failover scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Balancing:&lt;/strong&gt; For horizontally scaled setups, a load balancer can distribute incoming database requests across multiple database servers. This helps evenly distribute the workload and prevent individual servers from becoming overwhelmed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clustering:&lt;/strong&gt; MySQL can be deployed in a clustered setup, such as MySQL Cluster or Galera Cluster. These technologies enable synchronous replication and automatic failover, enhancing both high availability and read/write scalability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharding:&lt;/strong&gt; Sharding involves partitioning the database into smaller, independent parts called shards. Each shard is hosted on a separate server. Sharding can improve write scalability, but it introduces complexity in managing data distribution and joins across shards.&lt;/p&gt;

&lt;h2 id=&quot;mysql-innodb&quot;&gt;Mysql InnoDB&lt;/h2&gt;
&lt;p&gt;InnoDB is a transactional storage engine for MySQL, developed by Innobase Oy,
which was later acquired by Oracle Corporation. It is designed to provide 
high-performance and reliability for both read and write-intensive workloads. 
InnoDB supports ACID (Atomicity, Consistency, Isolation, Durability) properties, 
making it suitable for applications that require data integrity and consistency.&lt;/p&gt;

&lt;p&gt;An InnoDB Cluster consists of at least three MySQL Server instances, 
and it provides high-availability and scaling features. 
InnoDB Cluster uses the following MySQL technologies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL Shell, which is an advanced client and code editor for MySQL.&lt;/li&gt;
  &lt;li&gt;MySQL Server, and Group Replication, which enables a set of MySQL instances to provide high-availability. InnoDB Cluster provides an alternative, easy to use programmatic way to work with Group Replication.&lt;/li&gt;
  &lt;li&gt;MySQL Router, a lightweight middleware that provides transparent routing between your application and InnoDB Cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lets-try-it-out&quot;&gt;let’s try it out:&lt;/h2&gt;
&lt;p&gt;all the process its based at the article https://diptochakrabarty.medium.com/setting-mysql-cluster-using-docker-f0e405d03762
I create a repo using docker containers for easily handle several instances and join them at a innoDB cluster, 
docker with docker compose deploy the nodes with a simple&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;when all the nodes stay up we can confiogure the cluster, we need get into a mysql shell for create the cluster&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it mysql-docker-cluster_mysql-dev1_1 mysqlsh -uclusteradmin -pcladmin (shell for mysql-dev1 container)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;when we are  inside fomr this node we will configure all another nodes&lt;/p&gt;
&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dba.configureInstance(&quot;clusteradmin@mysql-dev1:3306&quot;)
dba.configureInstance(&quot;clusteradmin@mysql-dev2:3306&quot;)
dba.configureInstance(&quot;clusteradmin@mysql-dev3:3306&quot;)
dba.configureInstance(&quot;clusteradmin@mysql-dev4:3306&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;downsides&quot;&gt;Downsides:&lt;/h2&gt;

&lt;p&gt;While BFS is a simple and efficient algorithm for exploring large graphs or trees,
 it does have some downsides:&lt;/p&gt;

&lt;p&gt;Space Complexity: BFS uses a queue to keep track of the nodes that need to be 
visited, which can take up a lot of memory for large graphs or trees.&lt;/p&gt;

&lt;p&gt;Suboptimal Paths: BFS is designed to find the shortest path between two nodes, 
but it may not always find the optimal path in a weighted graph. This is 
because BFS does not take edge weights into account when determining the order 
in which to visit nodes.&lt;/p&gt;

&lt;p&gt;Time Complexity for Dense Graphs: In dense graphs with a large number of edges, 
BFS can have a high time complexity, as it may visit many unnecessary nodes 
before finding the desired path.&lt;/p&gt;

&lt;p&gt;Despite these downsides, BFS is still a widely used algorithm in computer 
science due to its simplicity and versatility.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;Breadth-First Search is a simple but powerful algorithm that can be used to 
traverse a graph or tree in a systematic way. It’s a good choice for finding 
the shortest path between two nodes or for exploring a graph or tree in a 
breadth-first manner. By visiting nodes at a fixed distance from the starting 
node before moving on to nodes that are farther away, BFS ensures that you visit 
all the nodes in a graph or tree efficiently.&lt;/p&gt;

&lt;p&gt;I hope you found this introduction to BFS helpful. If you have any questions or 
comments, feel free to leave them below!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://medium.com/@wagnerjfr/setting-up-mysql-group-replication-with-mysql-docker-images-f5eedd44fa2b&lt;/li&gt;
  &lt;li&gt;https://dev.mysql.com/blog-archive/setting-up-mysql-group-replication-with-mysql-docker-images/&lt;/li&gt;
  &lt;li&gt;https://pierreabreu.medium.com/how-to-create-master-slave-mysql-8-with-docker-compose-yml-c137f45e28c7&lt;/li&gt;
  &lt;li&gt;https://dev.mysql.com/doc/refman/5.7/en/mysql-innodb-cluster-introduction.html&lt;/li&gt;
  &lt;li&gt;https://diptochakrabarty.medium.com/setting-mysql-cluster-using-docker-f0e405d03762&lt;/li&gt;
  &lt;li&gt;https://github.com/DiptoChakrabarty?page=5&amp;amp;tab=repositories&lt;/li&gt;
  &lt;li&gt;https://github.com/DiptoChakrabarty/CodingInterviews/tree/master/VISA%20Senior%20Software%20Engineer%202019&lt;/li&gt;
  &lt;li&gt;https://blog.byte.builders/post/deploy-and-manage-mysql-innodb-cluster-in-aws/&lt;/li&gt;
  &lt;li&gt;https://dev.mysql.com/blog-archive/docker-compose-setup-for-innodb-cluster/&lt;/li&gt;
  &lt;li&gt;https://poazy.github.io/20210712-mysql-innodb-cluster_install-1m2s.html&lt;/li&gt;
  &lt;li&gt;https://www.dbi-services.com/blog/installing-mysql-innodb-cluster-in-oke-using-a-mysql-operator/&lt;/li&gt;
  &lt;li&gt;https://git.g-able.com/users/006763/projects&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Fri, 21 Jul 2023 00:00:00 -0500</pubDate>
            <link>/devops/mysql/ha/databases-mysql-HA_mysql/</link>
            <guid isPermaLink="true">/devops/mysql/ha/databases-mysql-HA_mysql/</guid>
            
            
            <category>devops/mysql/HA</category>
            
        </item>
        
    
        

        

        
        <item>
            <title>iftt proof</title>
            <description>&lt;p&gt;this post its  a proof for test automatization for links post with social media 
nets througth iftt&lt;/p&gt;

&lt;p&gt;reference https://eduardoboucas.com/blog/2015/04/28/sharing-jekyll-posts-on-social-media-using-front-matter-and-ifttt.html&lt;/p&gt;
</description>
            <pubDate>Thu, 22 Jun 2023 04:32:00 -0500</pubDate>
            <link>/blog/example-multi-social/</link>
            <guid isPermaLink="true">/blog/example-multi-social/</guid>
            
            <category>jekyll</category>
            
            <category>social</category>
            
            <category>example</category>
            
            <category>post</category>
            
            
            <category>blog</category>
            
        </item>
        
    
        

        

        
        <item>
            <title>Integrating Jekyll with Google Drive API</title>
            <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this post, we will explore how to connect your Jekyll-powered personal 
blog with a Google Drive public folder. 
The goal is to easily share PDFs or documents by displaying them on a page of 
my blog. By utilizing Jekyll’s static site generation capabilities and plugins, 
we can automate the process of adding new certifications documents without having to 
manually code each time. Let’s dive in! (final result &lt;a href=&quot;https://qleoz12.github.io/certs/&quot;&gt;certs&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;jekyll-and-ruby&quot;&gt;Jekyll and Ruby&lt;/h2&gt;

&lt;p&gt;To accomplish this task, we can leverage Jekyll’s plugin system, 
which allows us to extend its functionality. There are various types of 
plugins available in Jekyll, including generators, converters, commands, tags, 
filters, and hooks. More information on Jekyll plugins can be found &lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-generator-plugin-for-jekyll&quot;&gt;Creating a Generator Plugin for Jekyll&lt;/h2&gt;

&lt;p&gt;To begin, we need to create a generator plugin for Jekyll. Here’s the recipe 
to complete the task:&lt;/p&gt;

&lt;h3 id=&quot;enable-the-google-drive-api&quot;&gt;Enable the Google Drive API&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the Google APIs Console.&lt;/li&gt;
  &lt;li&gt;Create a new project.&lt;/li&gt;
  &lt;li&gt;Enable the Google Drive API by searching for it and enabling it.&lt;/li&gt;
  &lt;li&gt;Create credentials for a web server to access application data.&lt;/li&gt;
  &lt;li&gt;Name the service account and grant it a Project Role of Editor.&lt;/li&gt;
  &lt;li&gt;Download the JSON file containing the credentials.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;connect-google-api-with-jekyll&quot;&gt;Connect Google API with Jekyll&lt;/h3&gt;

&lt;p&gt;To connect Jekyll with the Google Drive API, follow these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google_drive&lt;/code&gt; gem by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;google_drive&quot;&lt;/code&gt; to your Gemfile.&lt;/li&gt;
  &lt;li&gt;Create a session using the JSON file obtained from the Google API.&lt;/li&gt;
  &lt;li&gt;Iterate through the list of available folders in your project.&lt;/li&gt;
  &lt;li&gt;Filter the folders to create a page that displays the folder name and its containing PDFs.&lt;/li&gt;
  &lt;li&gt;Filter the contents of each folder, listing the files using query parameters.&lt;/li&gt;
  &lt;li&gt;Transform the filtered children into an array of hash objects, containing the file name and public URL.&lt;/li&gt;
  &lt;li&gt;Create another hash array using the folder name as the key and the array of files as the value.&lt;/li&gt;
  &lt;li&gt;Inject the data read from the Google API into the Jekyll context to be processed for a custom page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s an example implementation of the generator plugin:&lt;/p&gt;

&lt;h4 id=&quot;plugin-generatorrb&quot;&gt;Plugin (generator.rb)&lt;/h4&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;google_drive&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GoogleDriveGenerator&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Generator&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GoogleDrive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_service_account_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./_plugins/config.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;folder&apos;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;childs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;q: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&apos; in parents &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;childstrasnformed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;childs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;childstrasnformed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;human_url&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;human_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;preview&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childstrasnformed&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Inject data into template&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;certs&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;template-indexhtml&quot;&gt;Template (index.html)&lt;/h4&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;div class=&quot;feature__wrapper&quot;&amp;gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link_hash&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site.data.certs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &amp;lt;header class=&quot;title-set-course&quot;&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/header&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link_hash[1]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
      &amp;lt;iframe src=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;human_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot; width=&quot;300&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
      &amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;human_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/a&amp;gt;
      &amp;lt;br&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I dedicated two days to researching and working on this task. 
I thoroughly enjoyed this journey and the learning experience it provided. 
I hope the code and information 
I have shared can be a valuable reference for others and be utilized for different purposes.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VqoSUSy011I&amp;amp;ab_channel=Twilio&quot;&gt;YouTube - Twilio: Google Spreadsheets and Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.twilio.com/blog/google-spreadsheets-ruby-html&quot;&gt;Twilio Blog - Google Spreadsheets and Ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gimite/google-spreadsheet-ruby&quot;&gt;GitHub - gimite/google-spreadsheet-ruby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/software-development-with-ease/understanding-hashmap-datastructure-ruby-aec3868bc5ad&quot;&gt;Medium - Understanding HashMap Data Structure in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--success&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you enjoy my content, please feel free to leave a comment or share 
your thoughts. Your feedback is greatly appreciated and encourages me to continue
 creating valuable content. Thank you for your support!&lt;/p&gt;

</description>
            <pubDate>Thu, 22 Jun 2023 00:00:00 -0500</pubDate>
            <link>/rubby/jekyll/jekyll-ruby-generator-google-api/</link>
            <guid isPermaLink="true">/rubby/jekyll/jekyll-ruby-generator-google-api/</guid>
            
            
            <category>rubby/jekyll</category>
            
        </item>
        
    
        

        

        
    
        

        

        
    
        

        

        
        <item>
            <title>Algorithm Breadth-First Search</title>
            <description>&lt;h1 id=&quot;breadth-first-search-a-simple-but-powerful-graph-traversal-algorithm&quot;&gt;Breadth-First Search: A Simple but Powerful Graph Traversal Algorithm&lt;/h1&gt;

&lt;p&gt;When working with graphs or trees, one of the most basic operations you may need 
to perform is searching for a specific node or path. Breadth-First Search (BFS) 
is a simple but powerful algorithm that allows you to traverse a graph or tree 
in a systematic way, visiting each node at a fixed distance from the starting 
node before moving on to nodes that are farther away. In this post, we’ll 
explore what BFS is, how it works, and why it’s important.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;

&lt;p&gt;Breadth-First Search is a graph traversal algorithm that visits all the nodes 
at a fixed distance from the starting node before visiting nodes that are 
farther away. This makes it a good choice for finding the shortest 
path between two nodes or for exploring a graph or tree in a systematic way.&lt;/p&gt;

&lt;h2 id=&quot;how-bfs-works&quot;&gt;How BFS Works:&lt;/h2&gt;

&lt;p&gt;The basic idea behind BFS is to visit all the nodes at a given distance 
from the starting node before moving on to nodes that are farther away. 
To do this, BFS uses a queue data structure to keep track of the nodes 
that need to be visited. Here’s how the algorithm works:&lt;/p&gt;

&lt;p&gt;Enqueue the starting node in the queue.
While the queue is not empty, dequeue the first node in the queue and mark it as visited.
Enqueue all the neighbors of the dequeued node that have not been visited yet.
Repeat steps 2-3 until the queue is empty.
By visiting nodes in this way, BFS ensures that you visit all the nodes at a 
given distance from the starting node before moving on to nodes that are farther
 away. This makes it an efficient algorithm for exploring large graphs or trees.&lt;/p&gt;

&lt;h2 id=&quot;why-bfs-is-important&quot;&gt;Why BFS is Important:&lt;/h2&gt;

&lt;p&gt;BFS is an important algorithm in computer science because it can be used to 
solve a wide range of problems, from finding the shortest path between two nodes 
to detecting cycles in a graph. It’s also a fundamental building block for more 
complex algorithms, such as Dijkstra’s algorithm for finding the shortest path 
in a weighted graph.&lt;/p&gt;

&lt;h3 id=&quot;example-implementation-in-java&quot;&gt;Example Implementation in Java:&lt;/h3&gt;

&lt;p&gt;Here’s an example implementation of BFS in Java:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BreadthFirstSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[][]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BFS traversal starting from node 0:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code represents a graph as an adjacency matrix and performs a BFS traversal 
starting from node 0. In each iteration of the while loop, the first node in the
queue is dequeued, and all its unvisited neighbors are added to the queue. 
The visited array keeps track of which nodes have been visited, 
so that each node is visited exactly once.&lt;/p&gt;

&lt;h2 id=&quot;time-complexity&quot;&gt;Time Complexity:&lt;/h2&gt;

&lt;p&gt;The time complexity of BFS is O(V+E), where V is the number of vertices and E 
is the number of edges in the graph. This is because BFS traverses all the 
vertices and edges in the graph once. In the worst case, where the graph is a 
complete graph, BFS will visit every vertex and edge exactly once, resulting in 
a time complexity of O(V^2).&lt;/p&gt;

&lt;h2 id=&quot;downsides&quot;&gt;Downsides:&lt;/h2&gt;

&lt;p&gt;While BFS is a simple and efficient algorithm for exploring large graphs or trees,
 it does have some downsides:&lt;/p&gt;

&lt;p&gt;Space Complexity: BFS uses a queue to keep track of the nodes that need to be 
visited, which can take up a lot of memory for large graphs or trees.&lt;/p&gt;

&lt;p&gt;Suboptimal Paths: BFS is designed to find the shortest path between two nodes, 
but it may not always find the optimal path in a weighted graph. This is 
because BFS does not take edge weights into account when determining the order 
in which to visit nodes.&lt;/p&gt;

&lt;p&gt;Time Complexity for Dense Graphs: In dense graphs with a large number of edges, 
BFS can have a high time complexity, as it may visit many unnecessary nodes 
before finding the desired path.&lt;/p&gt;

&lt;p&gt;Despite these downsides, BFS is still a widely used algorithm in computer 
science due to its simplicity and versatility.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;Breadth-First Search is a simple but powerful algorithm that can be used to 
traverse a graph or tree in a systematic way. It’s a good choice for finding 
the shortest path between two nodes or for exploring a graph or tree in a 
breadth-first manner. By visiting nodes at a fixed distance from the starting 
node before moving on to nodes that are farther away, BFS ensures that you visit 
all the nodes in a graph or tree efficiently.&lt;/p&gt;

&lt;p&gt;I hope you found this introduction to BFS helpful. If you have any questions or 
comments, feel free to leave them below!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Balazs, H. (no date) Artificial Intelligence I: Meta-heuristics and games in 
Java, Udemy. Udemy. Available at: 
https://www.udemy.com/course/artificial-intelligence-games-in-java/ (Accessed: April 16, 2023).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://stackoverflow.com/questions/5357211/breadth-first-search-query-in-mysql&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Sun, 16 Apr 2023 00:00:00 -0500</pubDate>
            <link>/fundamentals/algorithm/algorithms-Breadth-First-Search-copy-2/</link>
            <guid isPermaLink="true">/fundamentals/algorithm/algorithms-Breadth-First-Search-copy-2/</guid>
            
            
            <category>Fundamentals/algorithm</category>
            
        </item>
        
    
        

        

        
    
        

        

        
    
        

        

        
    
  </channel>
</rss>
