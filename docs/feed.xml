<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-14T18:17:24-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dann Brown Adventures</title><subtitle>An amazing website.</subtitle><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><entry><title type="html">Decorator pattern</title><link href="http://localhost:4000/fundamentls/patterns/post-exclude-search/" rel="alternate" type="text/html" title="Decorator pattern" /><published>2017-11-28T00:00:00-05:00</published><updated>2018-02-19T08:06:00-05:00</updated><id>http://localhost:4000/fundamentls/patterns/post-exclude-search</id><content type="html" xml:base="http://localhost:4000/fundamentls/patterns/post-exclude-search/"><![CDATA[<p>This is an example for implementation for decorator patter</p>

<p class="notice--info"><strong>Note:</strong> this is an example od decorator patterns, its will be a series for implement all patterns in java / python / go</p>

<p>To exclude files when using Algolia as a search provider add an array to <code class="language-plaintext highlighter-rouge">algolia.files_to_exclude</code> in your <code class="language-plaintext highlighter-rouge">_config.yml</code>. For more configuration options be sure to check their <a href="https://community.algolia.com/jekyll-algolia/options.html">full documentation</a>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">();</span>
    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractCondiment</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blacktea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"???"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffeetea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"????"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Greentea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"???"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lemon</span> <span class="kd">extends</span> <span class="nc">AbstractCondiment</span> <span class="o">{</span>
    <span class="nc">AbstactBeverage</span> <span class="n">abstactBeverage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Lemon</span><span class="o">(</span><span class="nc">AbstactBeverage</span> <span class="n">abstactBeverage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">abstactBeverage</span><span class="o">=</span>  <span class="n">abstactBeverage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">abstactBeverage</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">"??????"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">abstactBeverage</span><span class="o">.</span><span class="na">cost</span><span class="o">()+</span><span class="mi">11</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Blacktea</span> <span class="n">blacktea</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blacktea</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"???=="</span><span class="o">+</span><span class="n">blacktea</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">",???"</span><span class="o">+</span><span class="n">blacktea</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
        <span class="nc">Lemon</span> <span class="n">lemon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Lemon</span><span class="o">(</span><span class="n">blacktea</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"???????????=="</span><span class="o">+</span><span class="n">lemon</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">",???"</span><span class="o">+</span><span class="n">lemon</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentls/patterns" /><summary type="html"><![CDATA[This is an example for implementation for decorator patter]]></summary></entry></feed>