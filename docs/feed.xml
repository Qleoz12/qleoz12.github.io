<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-20T13:13:22-05:00</updated><id>/feed.xml</id><title type="html">Dann Brown Adventures</title><subtitle>An amazing website.</subtitle><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><entry><title type="html">Domain Driven Design</title><link href="/development%20aproach/Domain-Driven-Design/" rel="alternate" type="text/html" title="Domain Driven Design" /><published>2023-01-07T00:00:00-05:00</published><updated>2023-01-07T08:06:00-05:00</updated><id>/development%20aproach/Domain%20Driven%20Design</id><content type="html" xml:base="/development%20aproach/Domain-Driven-Design/"><![CDATA[<h2 id="concept">Concept</h2>

<p>DDD is a key design practice that helps to design the microservices of the product that you are
developing, into DDD the mainstay is de DOMAIN, and with a good desing and the fundamentals to apply
DDD aproach is usually for complex systems that requiere a clear and good arquitecture and layered, decouple
segregate structure.</p>

<p>the fundamentals inside DDD  are</p>

<ul>
  <li>Ubiquitous language and unified model language (UML)</li>
  <li>Multilayer architecture</li>
  <li>Artifacts (components)</li>
</ul>

<h2 id="ubiquitous-language">Ubiquitous language</h2>
<p>the comunication and desings with Ubiquitous language,<br />
let us remove the misundestanding ,misinterpretation 
and comunications gaps among them, using UML and the 
collective of diagrams and 
desings allow evade the ambiguty or definition unique per bounded context, 
for now think in it as a field where all logical componets related are setted</p>

<h2 id="multilayer-architecture">Multilayer architecture</h2>
<p>the common way to decouple the componets inside an application, in diferent layers tha have
single responsability and each layer are connect between them</p>

<ol>
  <li>Presentation layer or User Interface (UI).</li>
  <li>Application layer.</li>
  <li>Domain layer.</li>
  <li>Infrastructure layer.</li>
</ol>

<h2 id="artifacts-of-domain-driven-design">Artifacts of domain-driven design</h2>

<p>There are seven different artifacts used in DDD to express, create, and retrieve domain models:</p>

<ol>
  <li>Entities</li>
  <li>Value objects</li>
  <li>Services</li>
  <li>Aggregates</li>
  <li>Repository</li>
  <li>Factory</li>
  <li>Module</li>
</ol>

<p>References:</p>
<ul>
  <li>https://vladikk.com/2018/01/21/bounded-contexts-vs-microservices/</li>
  <li>https://medium.com/@jonathanloscalzo/domain-driven-design-principios-beneficios-y-elementos-primera-parte-aad90f30aa35</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Development Aproach" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">JAVA Patters Families</title><link href="/java/VUE-track-effects-trigger-copy/" rel="alternate" type="text/html" title="JAVA Patters Families" /><published>2022-12-21T00:00:00-05:00</published><updated>2022-12-21T08:06:00-05:00</updated><id>/java/VUE-track-effects-trigger%20copy</id><content type="html" xml:base="/java/VUE-track-effects-trigger-copy/"><![CDATA[<h2 id="concept">Concept</h2>
<p>there is 3 main families of patterns coudl be applied to all code langajes 
, so they are:</p>

<ul>
  <li>Creational Patterns :<br />
the family is focus on how we create the elements or instances in our 
solution for kids specific situations</li>
  <li>Structural Patterns</li>
  <li>Behavioral Patterns</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="JAVA" /><summary type="html"><![CDATA[Concept there is 3 main families of patterns coudl be applied to all code langajes , so they are:]]></summary></entry><entry><title type="html">Lambdas y Streams Practica</title><link href="/vue/patterns-Families/" rel="alternate" type="text/html" title="Lambdas y Streams Practica" /><published>2022-12-06T00:00:00-05:00</published><updated>2022-12-06T08:06:00-05:00</updated><id>/vue/patterns-Families</id><content type="html" xml:base="/vue/patterns-Families/"><![CDATA[<h2 id="concept">Concept</h2>

<h3 id="effect-es-todo-aquello-que-efectúa-un-cambio-en-la-aplicación">Effect: Es todo aquello que efectúa un cambio en la aplicación.</h3>
<h3 id="track-siguen-las-dependencias-dinámicas-y-sus-efectos-es-decir-se-mantiene-es-el-acto-de-dar-seguimiento-a-aquellas-variables-que-producen-el-efecto-para-que-si-una-cambia-el-efecto-se-vuelva-a-calcular">Track: Siguen las dependencias dinámicas y sus efectos. Es decir, se mantiene es el acto de dar seguimiento a aquellas variables que producen el efecto, para que si una cambia, el efecto se vuelva a calcular.</h3>
<h3 id="trigger-son-los-disparadores-de-los-efectos-de-las-dependencias-es-esa-acción-que-se-ejecuta-después-de-que-el-track-detectó-un-cambio-para-poder-actualizar-el-effect">Trigger:: Son los disparadores de los efectos de las dependencias. Es esa acción que se ejecuta después de que el track detectó un cambio para poder actualizar el effect.</h3>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="VUE" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Monitoring Spring apps with prometheus grafana and grafana-loki bonus-micrometer</title><link href="/java/spring/cloud/grafana-overview/Monitoring-spring-apps-with-prometheus-grafana-and-grafana-loki/" rel="alternate" type="text/html" title="Monitoring Spring apps with prometheus grafana and grafana-loki bonus-micrometer" /><published>2022-08-25T00:00:00-05:00</published><updated>2022-08-25T08:06:00-05:00</updated><id>/java/spring/cloud/grafana-overview/Monitoring%20spring%20apps%20with%20prometheus%20grafana%20%20and%20grafana-loki</id><content type="html" xml:base="/java/spring/cloud/grafana-overview/Monitoring-spring-apps-with-prometheus-grafana-and-grafana-loki/"><![CDATA[<h2 id="concept">Concept</h2>

<p><q>how to follow request throught the complex services interaction?</q></p>

<p><q> how watch and create alerts for any events in your apps</q></p>

<p><q>how create custom metrics ?</q></p>

<p>the companies with Cloud arquitectures, them must to watch the variety arquitectures of several solutions 
and how them interact between them, and detect errors fast and easier,in ald days you must to check the logs files 
but is not a good aproach when you have a lot or microservices and you are checkin a transaction among different
paths it could be take, hence the next aplications will show the way to handle this kind of situations</p>

<p><img src="https://raw.githubusercontent.com/grafana/grafana/main/docs/logo-horizontal.png" alt="" /></p>

<h3 id="grafana">Grafana</h3>
<p>allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data-driven culture:</p>

<p>Visualizations: Fast and flexible client side graphs with a multitude of options. Panel plugins offer many different ways to visualize metrics and logs.</p>

<p>Dynamic Dashboards: Create dynamic &amp; reusable dashboards with template variables that appear as dropdowns at the top of the dashboard.
Explore Metrics: Explore your data through ad-hoc queries and dynamic drilldown. Split view and compare different time ranges, queries and data sources side by side.
Explore Logs: Experience the magic of switching from metrics to logs with preserved label filters. Quickly search through all your logs or streaming them live.
Alerting: Visually define alert rules for your most important metrics. Grafana will continuously evaluate and send notifications to systems like Slack, PagerDuty, VictorOps, OpsGenie.
Mixed Data Sources: Mix different data sources in the same graph! You can specify a data source on a per-query basis. This works for even custom datasources.</p>

<h3 id="grafana-loki">Grafana loki</h3>

<p><img src="https://raw.githubusercontent.com/grafana/loki/main/docs/sources/logo_and_name.png" alt="" /></p>

<p>Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream.</p>

<p>A Loki-based logging stack consists of 3 components:</p>

<ul>
  <li>promtail is the agent, responsible for gathering logs and sending them to Loki.</li>
  <li>loki is the main server, responsible for storing logs and processing queries.</li>
  <li>Grafana for querying and displaying the logs.</li>
</ul>

<h3 id="prometheus">Prometheus</h3>

<p><img src="https://raw.githubusercontent.com/prometheus/prometheus/8cc7b7e57798553f026c1b6f3085f81f4661ede7/web/ui/react-app/src/images/prometheus_logo_grey.svg" alt="" style="background: #DF5430;" /></p>

<p>prometheus.io
Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company. To emphasize this, and to clarify the project’s governance structure, Prometheus joined the Cloud Native Computing Foundation in 2016 as the second hosted project, after Kubernetes.</p>

<p>usual after 2016
Prometheus, a Cloud Native Computing Foundation project, is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts when specified conditions are observed.</p>

<div class="responsive-wrap">
<!-- this is the embed code provided by Google -->
  <iframe src="https://docs.google.com/presentation/d/1Kugmmwna7YEz7gCah9IFGPsnOcLGYv3E5IdXjMFzReI/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
<!-- Google embed ends -->
</div>

<h2 id="references">References</h2>

<ul>
  <li>https://github.com/prometheus/prometheus</li>
  <li>https://github.com/grafana/grafana</li>
  <li>https://github.com/Qleoz12/spring-monitoring-demo?organization=Qleoz12&amp;organization=Qleoz12</li>
  <li>https://github.com/thbrunzendorf/monitoring-demo</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="java/spring/cloud/grafana-overview" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Reactive streams and the Flow API</title><link href="/java/jdk9/java-Reactive-streams-and-the-Flow-API/" rel="alternate" type="text/html" title="Reactive streams and the Flow API" /><published>2022-07-31T00:00:00-05:00</published><updated>2022-07-31T08:06:00-05:00</updated><id>/java/jdk9/java-Reactive%20streams%20and%20the%20Flow%20API</id><content type="html" xml:base="/java/jdk9/java-Reactive-streams-and-the-Flow-API/"><![CDATA[<h2 id="concept">Concept</h2>

<p>the reactive programmaing it’s helpful to clarify why this new paradigm is of growing importance. 
with libraries as Rxjs used by alot of framworks at frontedn for process streams, but before, it’s required to give some defanitions for treath future concepts</p>

<h3 id="streams">streams</h3>
<p>a streams is a queue of events, who is received by a system to be processed,the main diferent with tradicional
set of data, the stream is conveyed element by element, its allows to interact with each elemen before to reach the end of the data</p>

<p>Publisher
Subscriber
Subscription
Processor</p>

<p>marbaleable diagrams</p>

<p>java main libraries
example</p>

<h2 id="references">references</h2>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Java/JDK9" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Lambdas y Streams Practica</title><link href="/java/jdk8/java-Lambdas_Streams_Practica/" rel="alternate" type="text/html" title="Lambdas y Streams Practica" /><published>2022-06-28T00:00:00-05:00</published><updated>2022-06-28T08:06:00-05:00</updated><id>/java/jdk8/java-Lambdas_Streams_Practica</id><content type="html" xml:base="/java/jdk8/java-Lambdas_Streams_Practica/"><![CDATA[<h2 id="concept">Concept</h2>

<p><strong>lambda</strong>: A lambda expression (also called an anonymous function)
is a function without a name identifier. For example,
(int x, int y) -&gt; x + y is a lambda expression that takes
two integer args and returns their sum. Lambda expressions
can be conveniently passed as parameters or can be returned
from functions, and are the hallmark of functional languages.
Some object-oriented languages such as Smalltalk, Scala,
JavaScript, and Ruby supported lambda expressions from
the first release.</p>

<p><strong>streams</strong>: are an update to the Java API(JDK 8) that let you manipulate
 collections of data in a declarative way (you express a query rather than
code an ad hoc implementation for it). For now you can think of them as 
fancy iterators over a collection of data. In addition, streams can be 
processed in parallel transparently, without you having to write any
multithreaded code!.</p>

<h2 id="meetup">MeetUp</h2>
<p>Today, I attend to a meetup from the great group <a href="https://www.meetup.com/es-ES/medellin-java/events/286393287/?comment_table_id=522354757&amp;comment_table_name=event_comment">medellin-java</a> on meetups platform, in the talk to give,
 access to the repo for face this little exercises for practice and 
 understand how apply lambdas expression for get cleaner and readable
  code a lase remove a lot of verbose code, we have to carry when we 
  implement anonymous classes comparator, for filtering and behaviors 
  another context that until java JDK 7, you must create for get your 
  code working, java 8 updates with new statics methods and default 
  methods on interfaces, its allows currently get cleaner and short 
  useful codes, integrating OOP and functional programming and all in java world</p>

<h3 id="challenges">challenges</h3>

<p>Lambdas y Streams Practica https://github.com/Qleoz12/Medellin-java-streams/blob/resolve/Lambdas%20y%20Streams%20Practica.pdf</p>

<h3 id="challenges-responses">challenges responses</h3>

<p>https://github.com/Qleoz12/Medellin-java-streams</p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Java/JDK8" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Java SplitIterator</title><link href="/java/jdk8/java-Splititerator/" rel="alternate" type="text/html" title="Java SplitIterator" /><published>2022-06-25T00:00:00-05:00</published><updated>2022-06-25T08:06:00-05:00</updated><id>/java/jdk8/java-Splititerator</id><content type="html" xml:base="/java/jdk8/java-Splititerator/"><![CDATA[<h2 id="concept">Concept</h2>
<p>SplitIterator is a new interface, it comes with JDK 8, the main functionalities of split iterator is</p>

<ul>
  <li>split the data-structure</li>
  <li>iterate the chunks</li>
</ul>

<p>Split iterator was create for sake to improve the way to implement parallelism because, 
if you use SplitIterator API with Stream API, you could get an advance 
‘<em>Internal iteration allows you to process a stream in parallel without the need to
explicitly use and coordinate different threads in your code.</em>’</p>

<p>Spliterator itself does not provide the parallel programming behavior. However, 
it provides some methods to support it. 
Developers should utilize Spliterator interface methods and implement 
parallel programming by using Fork/Join Framework (one good approach).</p>

<p>It is an Iterator for whole Collection API.	It is an Iterator for both Collection and Stream API, except Map implemented classes.
It is an Universal Iterator.	It is NOT an Universal Iterator.
It does NOT support Parallel Programming.	It supports Parallel Programming.</p>

<table>
  <thead>
    <tr>
      <th>Iterator</th>
      <th>Spliterator</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Introduced in Java 1.2.</td>
      <td>Introduced in Java 1.8.</td>
    </tr>
    <tr>
      <td>It is an Iterator for whole Collection API.</td>
      <td>It is an Iterator for both Collection and Stream API, except Map implemented classes.</td>
    </tr>
    <tr>
      <td>It is an Universal Iterator.</td>
      <td>It is NOT an Universal Iterator.</td>
    </tr>
    <tr>
      <td>It does NOT support Parallel Programming.</td>
      <td>It supports Parallel Programming.</td>
    </tr>
  </tbody>
</table>

<p>in the next interface image, we can see the methods oof the Splititerator
<img src="/assets/images/java/splititerator.png" alt="alt" /></p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Java/JDK8" /><summary type="html"><![CDATA[Concept SplitIterator is a new interface, it comes with JDK 8, the main functionalities of split iterator is]]></summary></entry><entry><title type="html">Java Spring-cloud sleuth</title><link href="/java/spring/cloud/sleuth/java-spring-cloud-sleuth/" rel="alternate" type="text/html" title="Java Spring-cloud sleuth" /><published>2022-06-22T00:00:00-05:00</published><updated>2022-06-22T08:06:00-05:00</updated><id>/java/spring/cloud/sleuth/java-spring-cloud-sleuth</id><content type="html" xml:base="/java/spring/cloud/sleuth/java-spring-cloud-sleuth/"><![CDATA[<p>This is an post for ilustrate how works Spring Cloud Sleuth for track request throught several microservices</p>

<h2 id="concept">Concept</h2>
<p>Sleuth, it’s api module contains all necessary interfaces to be implemented by a tracer.
Spring Cloud Sleuth is able to trace your requests and messages so that you can correlate that communication to corresponding log entries. 
You can also export the tracing information to an external system to visualize latency. 
Spring Cloud Sleuth supports OpenZipkin compatible systems directly</p>

<p><em>Spring Cloud Sleuth borrows Dapper’s terminology.</em></p>

<p><strong>Span</strong>: The basic unit of work. For example, sending an RPC is a new span, as is sending a response to an RPC. Spans also have other data, such as descriptions, timestamped events, key-value annotations (tags), the ID of the span that caused them, and process IDs (normally IP addresses).</p>

<p>Spans can be started and stopped, and they keep track of their timing information. Once you create a span, you must stop it at some point in the future.</p>

<p><strong>Trace</strong>: A set of spans forming a tree-like structure. For example, if you run a distributed big-data store, a trace might be formed by a PUT request.</p>

<p><strong>Annotation/Event</strong>: Used to record the existence of an event in time.</p>

<p>Conceptually in a typical RPC scenario we mark these events to highlight what kind of an action took place (it doesn’t mean that physically such an event will be set on a span).</p>

<p>cs: Client Sent. The client has made a request. This annotation indicates the start of the span.</p>

<p>sr: Server Received: The server side got the request and started processing it. Subtracting the cs timestamp from this timestamp reveals the network latency.</p>

<p>ss: Server Sent. Annotated upon completion of request processing (when the response got sent back to the client). Subtracting the sr timestamp from this timestamp reveals the time needed by the server side to process the request.</p>

<p>cr: Client Received. Signifies the end of the span. The client has successfully received the response from the server side. Subtracting the cs timestamp from this timestamp reveals the whole time needed by the client to receive the response from the server.</p>

<p>In the next image you can check the behavior of track ID and span ID between each service and how you could easily identity the same request through the complex microservices structure,
in the case, trace ID is X for just one request and each service adds snap ID for the same request, it’s identify the flow the request on in and back
<img src="/assets/images/spring/sleuth-trace-id.jpg" alt="alt" /></p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="java/spring/cloud/sleuth" /><summary type="html"><![CDATA[This is an post for ilustrate how works Spring Cloud Sleuth for track request throught several microservices]]></summary></entry><entry><title type="html">Strategy Pattern</title><link href="/fundamentals/patterns/patterns-strategy/" rel="alternate" type="text/html" title="Strategy Pattern" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-strategy</id><content type="html" xml:base="/fundamentals/patterns/patterns-strategy/"><![CDATA[<p>This is an example implementation of the Strategy pattern</p>

<h2 id="concept">Concept</h2>
<p>The Strategy Pattern, lets you define a family of algorithms, encapsulate each algorithm
(called a strategy), and select an algorithm at run time. The example below shows a farmer app with several filters<br />
to get apples based on criteria. You can see these criteria as different behaviors in the filter method. For more info, check strategy design pattern 
(see http://en.wikipedia.org/wiki/Strategy_pattern)</p>

<p>In this situation you have several ways to filter apples based on criteria like 
weight, color, or other factors.</p>

<p><img src="/assets/images/pattern-strategy_z1.png" alt="alt" />
simple filter by color</p>

<p><img src="/assets/images/pattern-strategy_z2.png" alt="alt" />
simple parametrized filter by color</p>

<p><img src="/assets/images/pattern-strategy_z3.png" alt="alt" />
simple parametrized filter by weight</p>

<p>in the previous images you can see the easy way to resolve the problem , It works, but it repeats the non-bold code 
and breaks the DRY (don’t repeat yourself) principle of software engineering.You will need to repeat the code again if you want to mix filters or add new filters.</p>

<p><img src="/assets/images/pattern-strategy_z4.png" alt="alt" />
this image show a bad implementation for combining the filters of color and weight</p>

<p>perhaps, if you re-think the problem to decouple the behavior you requiered you can use this strategy pattern in this situation 
<img src="/assets/images/pattern-strategy_z6.png" alt="alt" /></p>

<p>But it implies you must create a new class for each new requirement you have to add to the farmer app, but if it class is for single use
then you could use lambda expressions for simplify more the code and get more cleaner and less complexity on development
check the las lines on main class for see the new improvement.</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Strategy patterns, it will be a series to implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the builder pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP with functional programming like lambdas functions</p>

<h2 id="abstractions">Abstractions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">a</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleWeightPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleColorPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleRedAndHeavyPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span> <span class="o">&amp;&amp;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">inventory</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">),</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">155</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">),</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">120</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">));</span>

		<span class="c1">// [Apple{color=GREEN, weight=80}, Apple{color=GREEN, weight=155}]</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">greenApples2</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleColorPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">greenApples2</span><span class="o">);</span>

    <span class="c1">// [Apple{color=GREEN, weight=155}]</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">heavyApples</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleWeightPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heavyApples</span><span class="o">);</span>

    <span class="c1">// []</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">redAndHeavyApples</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleRedAndHeavyPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">redAndHeavyApples</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">//Update JAVA 8 lambda Expresions for once use symplifies set of clasess</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>  <span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">RED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()));</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>  <span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span> <span class="o">&amp;&amp;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;);</span>
	
<span class="o">}</span>
</code></pre></div></div>
<p>finally I add this picture to review the idea of strategy pattern to conclude the topic
<img src="/assets/images/pattern-strategy_z5.png" alt="alt" /></p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example implementation of the Strategy pattern]]></summary></entry><entry><title type="html">Iterator Pattern</title><link href="/fundamentals/patterns/patterns-iterator/" rel="alternate" type="text/html" title="Iterator Pattern" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-iterator</id><content type="html" xml:base="/fundamentals/patterns/patterns-iterator/"><![CDATA[<p>This is an example for implementation for Iterator pattern</p>

<h2 id="concept">Concept</h2>
<p>the Iterator Pattern provides a way to access the elements
of an aggregate object sequentially without exposing its
underlying representation.</p>

<p>the situation is when you must to face several ways to create some kind element depeding combination of several parameters 
<img src="/assets/images/pattern_builder.png" alt="alt" /></p>

<p>Separate the construction of a complex object from its representation so that the
same construction process can create different representations</p>

<p>it´s looks similar at umls repreentation but its focus an abstraction how exposes the easy way for set all needs for create the object requiered
<img src="/assets/images/pattern_builder-1.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of builder patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the builder pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
	
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">);</span>
	
	<span class="kd">public</span> <span class="nc">Vacation</span> <span class="nf">getVacation</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Vacation</span> <span class="n">vacation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Vacation</span><span class="o">();</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setAccommodations</span><span class="o">(</span><span class="n">accommodations</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setEvents</span><span class="o">(</span><span class="n">events</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">vacation</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vacation</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAccommodations</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span> <span class="o">=</span> <span class="n">accommodations</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEvents</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span> <span class="o">=</span> <span class="n">events</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringBuffer</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"---- "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">" ----\n"</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Accommodation</span> <span class="n">a</span> <span class="o">:</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">e</span> <span class="o">:</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">e</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">display</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tent</span> <span class="kd">extends</span> <span class="nc">Accommodation</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">siteNumber</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Tent"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSiteNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSiteNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLocation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">siteNumber</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="s">"Site number "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutdoorsVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">OutdoorsVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Outdoorsy Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Tent</span> <span class="n">tent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setSiteNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tent</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hike: "</span> <span class="o">+</span> <span class="n">event</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CityVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">CityVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"City Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Hotel</span> <span class="n">hotel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setRoomNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hotel</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"See the "</span> <span class="o">+</span> <span class="n">event</span> <span class="o">+</span> <span class="s">" show"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">VacationBuilder</span> <span class="n">outdoorsyVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OutdoorsVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">outdoorsyVacation</span> <span class="o">=</span> <span class="n">outdoorsyVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">34</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Beach"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Mountains"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">outdoorsyVacation</span><span class="o">);</span>
		
		<span class="nc">VacationBuilder</span> <span class="n">cityVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CityVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">cityVacation</span> <span class="o">=</span> <span class="n">cityVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Grand Facadian"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Hotel Commander"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Cirque du Soleil"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityVacation</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Iterator pattern]]></summary></entry></feed>