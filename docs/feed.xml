<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-06-15T14:06:35-05:00</updated><id>/feed.xml</id><title type="html">Dann Brown Adventures</title><subtitle>An amazing website.</subtitle><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><entry><title type="html">Algorithm Breadth-First Search</title><link href="/fundamentals/algorithm/algorithms-Breadth-First-Search-copy/" rel="alternate" type="text/html" title="Algorithm Breadth-First Search" /><published>2023-04-16T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/algorithm/algorithms-Breadth-First-Search%20copy</id><content type="html" xml:base="/fundamentals/algorithm/algorithms-Breadth-First-Search-copy/"><![CDATA[<h1 id="breadth-first-search-a-simple-but-powerful-graph-traversal-algorithm">Breadth-First Search: A Simple but Powerful Graph Traversal Algorithm</h1>

<p>When working with graphs or trees, one of the most basic operations you may need 
to perform is searching for a specific node or path. Breadth-First Search (BFS) 
is a simple but powerful algorithm that allows you to traverse a graph or tree 
in a systematic way, visiting each node at a fixed distance from the starting 
node before moving on to nodes that are farther away. In this post, we’ll 
explore what BFS is, how it works, and why it’s important.</p>

<h2 id="introduction">Introduction:</h2>

<p>Breadth-First Search is a graph traversal algorithm that visits all the nodes 
at a fixed distance from the starting node before visiting nodes that are 
farther away. This makes it a good choice for finding the shortest 
path between two nodes or for exploring a graph or tree in a systematic way.</p>

<h2 id="how-bfs-works">How BFS Works:</h2>

<p>The basic idea behind BFS is to visit all the nodes at a given distance 
from the starting node before moving on to nodes that are farther away. 
To do this, BFS uses a queue data structure to keep track of the nodes 
that need to be visited. Here’s how the algorithm works:</p>

<p>Enqueue the starting node in the queue.
While the queue is not empty, dequeue the first node in the queue and mark it as visited.
Enqueue all the neighbors of the dequeued node that have not been visited yet.
Repeat steps 2-3 until the queue is empty.
By visiting nodes in this way, BFS ensures that you visit all the nodes at a 
given distance from the starting node before moving on to nodes that are farther
 away. This makes it an efficient algorithm for exploring large graphs or trees.</p>

<h2 id="why-bfs-is-important">Why BFS is Important:</h2>

<p>BFS is an important algorithm in computer science because it can be used to 
solve a wide range of problems, from finding the shortest path between two nodes 
to detecting cycles in a graph. It’s also a fundamental building block for more 
complex algorithms, such as Dijkstra’s algorithm for finding the shortest path 
in a weighted graph.</p>

<h3 id="example-implementation-in-java">Example Implementation in Java:</h3>

<p>Here’s an example implementation of BFS in Java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BreadthFirstSearch</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">graph</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        
        <span class="n">visited</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
        
        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">}</span>
        <span class="o">};</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"BFS traversal starting from node 0:"</span><span class="o">);</span>
        <span class="n">bfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This code represents a graph as an adjacency matrix and performs a BFS traversal 
starting from node 0. In each iteration of the while loop, the first node in the
queue is dequeued, and all its unvisited neighbors are added to the queue. 
The visited array keeps track of which nodes have been visited, 
so that each node is visited exactly once.</p>

<h2 id="time-complexity">Time Complexity:</h2>

<p>The time complexity of BFS is O(V+E), where V is the number of vertices and E 
is the number of edges in the graph. This is because BFS traverses all the 
vertices and edges in the graph once. In the worst case, where the graph is a 
complete graph, BFS will visit every vertex and edge exactly once, resulting in 
a time complexity of O(V^2).</p>

<h2 id="downsides">Downsides:</h2>

<p>While BFS is a simple and efficient algorithm for exploring large graphs or trees,
 it does have some downsides:</p>

<p>Space Complexity: BFS uses a queue to keep track of the nodes that need to be 
visited, which can take up a lot of memory for large graphs or trees.</p>

<p>Suboptimal Paths: BFS is designed to find the shortest path between two nodes, 
but it may not always find the optimal path in a weighted graph. This is 
because BFS does not take edge weights into account when determining the order 
in which to visit nodes.</p>

<p>Time Complexity for Dense Graphs: In dense graphs with a large number of edges, 
BFS can have a high time complexity, as it may visit many unnecessary nodes 
before finding the desired path.</p>

<p>Despite these downsides, BFS is still a widely used algorithm in computer 
science due to its simplicity and versatility.</p>

<h2 id="conclusion">Conclusion:</h2>

<p>Breadth-First Search is a simple but powerful algorithm that can be used to 
traverse a graph or tree in a systematic way. It’s a good choice for finding 
the shortest path between two nodes or for exploring a graph or tree in a 
breadth-first manner. By visiting nodes at a fixed distance from the starting 
node before moving on to nodes that are farther away, BFS ensures that you visit 
all the nodes in a graph or tree efficiently.</p>

<p>I hope you found this introduction to BFS helpful. If you have any questions or 
comments, feel free to leave them below!</p>

<h2 id="references">References</h2>
<ul>
  <li>
    <p>Balazs, H. (no date) Artificial Intelligence I: Meta-heuristics and games in 
Java, Udemy. Udemy. Available at: 
https://www.udemy.com/course/artificial-intelligence-games-in-java/ (Accessed: April 16, 2023).</p>
  </li>
  <li>
    <p>https://stackoverflow.com/questions/5357211/breadth-first-search-query-in-mysql</p>
  </li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/algorithm" /><summary type="html"><![CDATA[Breadth-First Search: A Simple but Powerful Graph Traversal Algorithm]]></summary></entry><entry><title type="html">Deterministic Finite Automata (DFAs)</title><link href="/fundamentals/algorithm/algorithms-Deterministic-Finite-automates/" rel="alternate" type="text/html" title="Deterministic Finite Automata (DFAs)" /><published>2023-04-16T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/algorithm/algorithms-Deterministic-Finite-automates</id><content type="html" xml:base="/fundamentals/algorithm/algorithms-Deterministic-Finite-automates/"><![CDATA[<p>A deterministic finite automaton (DFA) is a mathematical model used to recognize 
patterns in strings. It is a type of finite state machine that accepts or rejects 
a given string based on its current state and the input it receives.</p>

<h2 id="formal-definition">Formal definition</h2>
<p>A DFA is defined as a 5-tuple, consisting of:</p>

<p>A finite set of states Q <br />
A finite set of input symbols Σ (also called the alphabet) <br />
A transition function δ : Q × Σ → Q, which maps a state and an input symbol to a new state <br />
A start state q<sub>0</sub> ∈ Q <br />
A set of accept states F ⊆ Q</p>

<h2 id="how-dfas-work">How DFAs work</h2>
<p>A DFA starts in the start state and reads a string of input symbols. 
For each symbol, it transitions to a new state based on the current state and the symbol. 
If the final state is an accept state, the string is accepted; otherwise, it is rejected.</p>

<h2 id="example">Example</h2>
<p>Let’s consider a DFA that recognizes strings of 0’s and 1’s that have an odd 
number of 1’s. The DFA has two states: q<sub>0</sub> and q<sub>1</sub>. 
The transition function is defined as follows:</p>

<p>δ(q<sub>0</sub>, 0) = q<sub>0</sub>
δ(q<sub>0</sub>, 1) = q<sub>1</sub>
δ(q<sub>1</sub>, 0) = q<sub>1</sub>
δ(q<sub>1</sub>, 1) = q<sub>0</sub>
The start state is q<sub>0</sub> and the accept state is q<sub>1</sub>.</p>

<p>Let’s see how the DFA processes the string “11010”:</p>

<p>q0 –(1)–&gt; q1 –(1)–&gt; q0 –(0)–&gt; q0 –(1)–&gt; q1 –(0)–&gt; q1
The final state is q<sub>1</sub>, which is an accept state. 
Therefore, the string “11010” is accepted by the DFA.</p>

<h2 id="slides">slides</h2>
<div class="responsive-wrap">
<!-- this is the embed code provided by Google -->
  <iframe src="https://docs.google.com/presentation/d/18b_TQyfrvZu2krvv_HYpQvWRHYA1fD9iiwvB9uBcJuI/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
<!-- Google embed ends -->
</div>

<h2 id="conclusion">Conclusion:</h2>

<p>DFAs are a powerful tool for recognizing patterns in strings. 
They can be used in a wide range of applications, such as lexical analysis,
regular expression matching, and compiler design. Understanding DFAs is an 
important part of computer science and is essential for building robust 
software systems.</p>

<h2 id="repository">Repository</h2>

<div class="feature__wrapper">

  
    <div class="feature__item--left">
      <div class="archive__item">
        
          <div class="archive__item-teaser">
            <img src="https://img.asmedia.epimg.net/resizer/6Y-eMP_PRbjQvkQuWS86T_FG61U=/644x362/cloudfront-eu-central-1.images.arcpublishing.com/diarioas/PVMMQEWO7VOXNKKE7GPPYWTE2Y.jpg" alt="" />
            
          </div>
        

        <div class="archive__item-body">
          
            <h2 class="archive__item-title">Algorithms DFA</h2>
          

          
            <div class="archive__item-excerpt">
              <p>This is some sample java maven project  with a package for FDA proofs</p>

            </div>
          

          
            <p><a href="https://github.com/Qleoz12/JavaKnowledge/tree/master/algoritms" class="btn btn--inverse">repository</a></p>
          
        </div>
      </div>
    </div>
  

</div>

<h2 id="references">References</h2>
<p>
* https://ivanvladimir.gitlab.io/lfya_book/docs/02lam%C3%A1quinasinmemoria/04aut%C3%B3matafinito/
* https://colab.research.google.com/github/ivanvladimir/maquinas_notebooks/blob/main/lfya/02%20La%20m%C3%A1quina%20sin%20memoria.ipynb
</p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/algorithm" /><summary type="html"><![CDATA[A deterministic finite automaton (DFA) is a mathematical model used to recognize patterns in strings. It is a type of finite state machine that accepts or rejects a given string based on its current state and the input it receives.]]></summary></entry><entry><title type="html">Algorithm Breadth-First Search</title><link href="/fundamentals/algorithm/algorithms-Breadth-First-Search/" rel="alternate" type="text/html" title="Algorithm Breadth-First Search" /><published>2023-04-16T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/algorithm/algorithms-Breadth-First-Search</id><content type="html" xml:base="/fundamentals/algorithm/algorithms-Breadth-First-Search/"><![CDATA[<h1 id="breadth-first-search-a-simple-but-powerful-graph-traversal-algorithm">Breadth-First Search: A Simple but Powerful Graph Traversal Algorithm</h1>

<p>When working with graphs or trees, one of the most basic operations you may need 
to perform is searching for a specific node or path. Breadth-First Search (BFS) 
is a simple but powerful algorithm that allows you to traverse a graph or tree 
in a systematic way, visiting each node at a fixed distance from the starting 
node before moving on to nodes that are farther away. In this post, we’ll 
explore what BFS is, how it works, and why it’s important.</p>

<h2 id="introduction">Introduction:</h2>

<p>Breadth-First Search is a graph traversal algorithm that visits all the nodes 
at a fixed distance from the starting node before visiting nodes that are 
farther away. This makes it a good choice for finding the shortest 
path between two nodes or for exploring a graph or tree in a systematic way.</p>

<h2 id="how-bfs-works">How BFS Works:</h2>

<p>The basic idea behind BFS is to visit all the nodes at a given distance 
from the starting node before moving on to nodes that are farther away. 
To do this, BFS uses a queue data structure to keep track of the nodes 
that need to be visited. Here’s how the algorithm works:</p>

<p>Enqueue the starting node in the queue.
While the queue is not empty, dequeue the first node in the queue and mark it as visited.
Enqueue all the neighbors of the dequeued node that have not been visited yet.
Repeat steps 2-3 until the queue is empty.
By visiting nodes in this way, BFS ensures that you visit all the nodes at a 
given distance from the starting node before moving on to nodes that are farther
 away. This makes it an efficient algorithm for exploring large graphs or trees.</p>

<h2 id="why-bfs-is-important">Why BFS is Important:</h2>

<p>BFS is an important algorithm in computer science because it can be used to 
solve a wide range of problems, from finding the shortest path between two nodes 
to detecting cycles in a graph. It’s also a fundamental building block for more 
complex algorithms, such as Dijkstra’s algorithm for finding the shortest path 
in a weighted graph.</p>

<h3 id="example-implementation-in-java">Example Implementation in Java:</h3>

<p>Here’s an example implementation of BFS in Java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BreadthFirstSearch</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">graph</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        
        <span class="n">visited</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
        
        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
            <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">}</span>
        <span class="o">};</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"BFS traversal starting from node 0:"</span><span class="o">);</span>
        <span class="n">bfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This code represents a graph as an adjacency matrix and performs a BFS traversal 
starting from node 0. In each iteration of the while loop, the first node in the
queue is dequeued, and all its unvisited neighbors are added to the queue. 
The visited array keeps track of which nodes have been visited, 
so that each node is visited exactly once.</p>

<h2 id="time-complexity">Time Complexity:</h2>

<p>The time complexity of BFS is O(V+E), where V is the number of vertices and E 
is the number of edges in the graph. This is because BFS traverses all the 
vertices and edges in the graph once. In the worst case, where the graph is a 
complete graph, BFS will visit every vertex and edge exactly once, resulting in 
a time complexity of O(V^2).</p>

<h2 id="downsides">Downsides:</h2>

<p>While BFS is a simple and efficient algorithm for exploring large graphs or trees,
 it does have some downsides:</p>

<p>Space Complexity: BFS uses a queue to keep track of the nodes that need to be 
visited, which can take up a lot of memory for large graphs or trees.</p>

<p>Suboptimal Paths: BFS is designed to find the shortest path between two nodes, 
but it may not always find the optimal path in a weighted graph. This is 
because BFS does not take edge weights into account when determining the order 
in which to visit nodes.</p>

<p>Time Complexity for Dense Graphs: In dense graphs with a large number of edges, 
BFS can have a high time complexity, as it may visit many unnecessary nodes 
before finding the desired path.</p>

<p>Despite these downsides, BFS is still a widely used algorithm in computer 
science due to its simplicity and versatility.</p>

<h2 id="conclusion">Conclusion:</h2>

<p>Breadth-First Search is a simple but powerful algorithm that can be used to 
traverse a graph or tree in a systematic way. It’s a good choice for finding 
the shortest path between two nodes or for exploring a graph or tree in a 
breadth-first manner. By visiting nodes at a fixed distance from the starting 
node before moving on to nodes that are farther away, BFS ensures that you visit 
all the nodes in a graph or tree efficiently.</p>

<p>I hope you found this introduction to BFS helpful. If you have any questions or 
comments, feel free to leave them below!</p>

<h2 id="references">References</h2>
<ul>
  <li>
    <p>Balazs, H. (no date) Artificial Intelligence I: Meta-heuristics and games in 
Java, Udemy. Udemy. Available at: 
https://www.udemy.com/course/artificial-intelligence-games-in-java/ (Accessed: April 16, 2023).</p>
  </li>
  <li>
    <p>https://stackoverflow.com/questions/5357211/breadth-first-search-query-in-mysql</p>
  </li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/algorithm" /><summary type="html"><![CDATA[Breadth-First Search: A Simple but Powerful Graph Traversal Algorithm]]></summary></entry><entry><title type="html">Domain Driven Design</title><link href="/development%20aproach/Domain-Driven-Design/" rel="alternate" type="text/html" title="Domain Driven Design" /><published>2023-01-07T00:00:00-05:00</published><updated>2023-01-07T08:06:00-05:00</updated><id>/development%20aproach/Domain%20Driven%20Design</id><content type="html" xml:base="/development%20aproach/Domain-Driven-Design/"><![CDATA[<h2 id="concept">Concept</h2>

<p>DDD is a key design practice that helps to design the microservices of the product that you are
developing, into DDD the mainstay is de DOMAIN, and with a good desing and the fundamentals to apply
DDD aproach is usually for complex systems that requiere a clear and good arquitecture and layered, decouple
segregate structure.</p>

<p>the fundamentals inside DDD  are</p>

<ul>
  <li>Ubiquitous language and unified model language (UML)</li>
  <li>Multilayer architecture</li>
  <li>Artifacts (components)</li>
</ul>

<h2 id="ubiquitous-language">Ubiquitous language</h2>
<p>the comunication and desings with Ubiquitous language,<br />
let us remove the misundestanding ,misinterpretation 
and comunications gaps among them, using UML and the 
collective of diagrams and 
desings allow evade the ambiguty or definition unique per bounded context, 
for now think in it as a field where all logical componets related are setted</p>

<h2 id="multilayer-architecture">Multilayer architecture</h2>
<p>the common way to decouple the componets inside an application, in diferent layers tha have
single responsability and each layer are connect between them</p>

<ol>
  <li>Presentation layer or User Interface (UI).</li>
  <li>Application layer.</li>
  <li>Domain layer.</li>
  <li>Infrastructure layer.</li>
</ol>

<h2 id="artifacts-of-domain-driven-design">Artifacts of domain-driven design</h2>

<p>There are seven different artifacts used in DDD to express, create, and retrieve domain models:</p>

<ol>
  <li>Entities</li>
  <li>Value objects</li>
  <li>Services</li>
  <li>Aggregates</li>
  <li>Repository</li>
  <li>Factory</li>
  <li>Module</li>
</ol>

<p>References:</p>
<ul>
  <li>https://vladikk.com/2018/01/21/bounded-contexts-vs-microservices/</li>
  <li>https://medium.com/@jonathanloscalzo/domain-driven-design-principios-beneficios-y-elementos-primera-parte-aad90f30aa35</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Development Aproach" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Domain Driven Design</title><link href="/development%20aproach/java-generics/" rel="alternate" type="text/html" title="Domain Driven Design" /><published>2023-01-07T00:00:00-05:00</published><updated>2023-01-07T08:06:00-05:00</updated><id>/development%20aproach/java-generics</id><content type="html" xml:base="/development%20aproach/java-generics/"><![CDATA[<h2 id="concept">Concept</h2>

<p>References:</p>
<ul>
  <li>https://www.digitalocean.com/community/tutorials/java-generics-example-method-class-interface#generics-java</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Development Aproach" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">JAVA Patters Families</title><link href="/java/VUE-track-effects-trigger-copy/" rel="alternate" type="text/html" title="JAVA Patters Families" /><published>2022-12-21T00:00:00-05:00</published><updated>2022-12-21T08:06:00-05:00</updated><id>/java/VUE-track-effects-trigger%20copy</id><content type="html" xml:base="/java/VUE-track-effects-trigger-copy/"><![CDATA[<h2 id="concept">Concept</h2>
<p>there is 3 main families of patterns coudl be applied to all code langajes 
, so they are:</p>

<ul>
  <li>Creational Patterns :<br />
the family is focus on how we create the elements or instances in our 
solution for kids specific situations</li>
  <li>Structural Patterns</li>
  <li>Behavioral Patterns</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="JAVA" /><summary type="html"><![CDATA[Concept there is 3 main families of patterns coudl be applied to all code langajes , so they are:]]></summary></entry><entry><title type="html">Lambdas y Streams Practica</title><link href="/vue/patterns-Families/" rel="alternate" type="text/html" title="Lambdas y Streams Practica" /><published>2022-12-06T00:00:00-05:00</published><updated>2022-12-06T08:06:00-05:00</updated><id>/vue/patterns-Families</id><content type="html" xml:base="/vue/patterns-Families/"><![CDATA[<h2 id="concept">Concept</h2>

<h3 id="effect-es-todo-aquello-que-efectúa-un-cambio-en-la-aplicación">Effect: Es todo aquello que efectúa un cambio en la aplicación.</h3>
<h3 id="track-siguen-las-dependencias-dinámicas-y-sus-efectos-es-decir-se-mantiene-es-el-acto-de-dar-seguimiento-a-aquellas-variables-que-producen-el-efecto-para-que-si-una-cambia-el-efecto-se-vuelva-a-calcular">Track: Siguen las dependencias dinámicas y sus efectos. Es decir, se mantiene es el acto de dar seguimiento a aquellas variables que producen el efecto, para que si una cambia, el efecto se vuelva a calcular.</h3>
<h3 id="trigger-son-los-disparadores-de-los-efectos-de-las-dependencias-es-esa-acción-que-se-ejecuta-después-de-que-el-track-detectó-un-cambio-para-poder-actualizar-el-effect">Trigger:: Son los disparadores de los efectos de las dependencias. Es esa acción que se ejecuta después de que el track detectó un cambio para poder actualizar el effect.</h3>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="VUE" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Monitoring Spring apps with prometheus grafana and grafana-loki bonus-micrometer</title><link href="/java/spring/cloud/grafana-overview/Monitoring-spring-apps-with-prometheus-grafana-and-grafana-loki/" rel="alternate" type="text/html" title="Monitoring Spring apps with prometheus grafana and grafana-loki bonus-micrometer" /><published>2022-08-25T00:00:00-05:00</published><updated>2022-08-25T08:06:00-05:00</updated><id>/java/spring/cloud/grafana-overview/Monitoring%20spring%20apps%20with%20prometheus%20grafana%20%20and%20grafana-loki</id><content type="html" xml:base="/java/spring/cloud/grafana-overview/Monitoring-spring-apps-with-prometheus-grafana-and-grafana-loki/"><![CDATA[<h2 id="concept">Concept</h2>

<p><q>how to follow request throught the complex services interaction?</q></p>

<p><q> how watch and create alerts for any events in your apps</q></p>

<p><q>how create custom metrics ?</q></p>

<p>the companies with Cloud arquitectures, them must to watch the variety arquitectures of several solutions 
and how them interact between them, and detect errors fast and easier,in ald days you must to check the logs files 
but is not a good aproach when you have a lot or microservices and you are checkin a transaction among different
paths it could be take, hence the next aplications will show the way to handle this kind of situations</p>

<p><img src="https://raw.githubusercontent.com/grafana/grafana/main/docs/logo-horizontal.png" alt="" /></p>

<h3 id="grafana">Grafana</h3>
<p>allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data-driven culture:</p>

<p>Visualizations: Fast and flexible client side graphs with a multitude of options. Panel plugins offer many different ways to visualize metrics and logs.</p>

<p>Dynamic Dashboards: Create dynamic &amp; reusable dashboards with template variables that appear as dropdowns at the top of the dashboard.
Explore Metrics: Explore your data through ad-hoc queries and dynamic drilldown. Split view and compare different time ranges, queries and data sources side by side.
Explore Logs: Experience the magic of switching from metrics to logs with preserved label filters. Quickly search through all your logs or streaming them live.
Alerting: Visually define alert rules for your most important metrics. Grafana will continuously evaluate and send notifications to systems like Slack, PagerDuty, VictorOps, OpsGenie.
Mixed Data Sources: Mix different data sources in the same graph! You can specify a data source on a per-query basis. This works for even custom datasources.</p>

<h3 id="grafana-loki">Grafana loki</h3>

<p><img src="https://raw.githubusercontent.com/grafana/loki/main/docs/sources/logo_and_name.png" alt="" /></p>

<p>Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream.</p>

<p>A Loki-based logging stack consists of 3 components:</p>

<ul>
  <li>promtail is the agent, responsible for gathering logs and sending them to Loki.</li>
  <li>loki is the main server, responsible for storing logs and processing queries.</li>
  <li>Grafana for querying and displaying the logs.</li>
</ul>

<h3 id="prometheus">Prometheus</h3>

<p><img src="https://raw.githubusercontent.com/prometheus/prometheus/8cc7b7e57798553f026c1b6f3085f81f4661ede7/web/ui/react-app/src/images/prometheus_logo_grey.svg" alt="" style="background: #DF5430;" /></p>

<p>prometheus.io
Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company. To emphasize this, and to clarify the project’s governance structure, Prometheus joined the Cloud Native Computing Foundation in 2016 as the second hosted project, after Kubernetes.</p>

<p>usual after 2016
Prometheus, a Cloud Native Computing Foundation project, is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts when specified conditions are observed.</p>

<div class="responsive-wrap">
<!-- this is the embed code provided by Google -->
  <iframe src="https://docs.google.com/presentation/d/1Kugmmwna7YEz7gCah9IFGPsnOcLGYv3E5IdXjMFzReI/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
<!-- Google embed ends -->
</div>

<h2 id="references">References</h2>

<ul>
  <li>https://github.com/prometheus/prometheus</li>
  <li>https://github.com/grafana/grafana</li>
  <li>https://github.com/Qleoz12/spring-monitoring-demo?organization=Qleoz12&amp;organization=Qleoz12</li>
  <li>https://github.com/thbrunzendorf/monitoring-demo</li>
</ul>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="java/spring/cloud/grafana-overview" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Reactive streams and the Flow API</title><link href="/java/jdk9/java-Reactive-streams-and-the-Flow-API/" rel="alternate" type="text/html" title="Reactive streams and the Flow API" /><published>2022-07-31T00:00:00-05:00</published><updated>2022-07-31T08:06:00-05:00</updated><id>/java/jdk9/java-Reactive%20streams%20and%20the%20Flow%20API</id><content type="html" xml:base="/java/jdk9/java-Reactive-streams-and-the-Flow-API/"><![CDATA[<h2 id="concept">Concept</h2>

<p>the reactive programmaing it’s helpful to clarify why this new paradigm is of growing importance. 
with libraries as Rxjs used by alot of framworks at frontedn for process streams, but before, it’s required to give some defanitions for treath future concepts</p>

<h3 id="streams">streams</h3>
<p>a streams is a queue of events, who is received by a system to be processed,the main diferent with tradicional
set of data, the stream is conveyed element by element, its allows to interact with each elemen before to reach the end of the data</p>

<p>Publisher
Subscriber
Subscription
Processor</p>

<p>marbaleable diagrams</p>

<p>java main libraries
example</p>

<h2 id="references">references</h2>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Java/JDK9" /><summary type="html"><![CDATA[Concept]]></summary></entry><entry><title type="html">Lambdas y Streams Practica</title><link href="/java/jdk8/java-Lambdas_Streams_Practica/" rel="alternate" type="text/html" title="Lambdas y Streams Practica" /><published>2022-06-28T00:00:00-05:00</published><updated>2022-06-28T08:06:00-05:00</updated><id>/java/jdk8/java-Lambdas_Streams_Practica</id><content type="html" xml:base="/java/jdk8/java-Lambdas_Streams_Practica/"><![CDATA[<h2 id="concept">Concept</h2>

<p><strong>lambda</strong>: A lambda expression (also called an anonymous function)
is a function without a name identifier. For example,
(int x, int y) -&gt; x + y is a lambda expression that takes
two integer args and returns their sum. Lambda expressions
can be conveniently passed as parameters or can be returned
from functions, and are the hallmark of functional languages.
Some object-oriented languages such as Smalltalk, Scala,
JavaScript, and Ruby supported lambda expressions from
the first release.</p>

<p><strong>streams</strong>: are an update to the Java API(JDK 8) that let you manipulate
 collections of data in a declarative way (you express a query rather than
code an ad hoc implementation for it). For now you can think of them as 
fancy iterators over a collection of data. In addition, streams can be 
processed in parallel transparently, without you having to write any
multithreaded code!.</p>

<h2 id="meetup">MeetUp</h2>
<p>Today, I attend to a meetup from the great group <a href="https://www.meetup.com/es-ES/medellin-java/events/286393287/?comment_table_id=522354757&amp;comment_table_name=event_comment">medellin-java</a> on meetups platform, in the talk to give,
 access to the repo for face this little exercises for practice and 
 understand how apply lambdas expression for get cleaner and readable
  code a lase remove a lot of verbose code, we have to carry when we 
  implement anonymous classes comparator, for filtering and behaviors 
  another context that until java JDK 7, you must create for get your 
  code working, java 8 updates with new statics methods and default 
  methods on interfaces, its allows currently get cleaner and short 
  useful codes, integrating OOP and functional programming and all in java world</p>

<h3 id="challenges">challenges</h3>

<p>Lambdas y Streams Practica https://github.com/Qleoz12/Medellin-java-streams/blob/resolve/Lambdas%20y%20Streams%20Practica.pdf</p>

<h3 id="challenges-responses">challenges responses</h3>

<p>https://github.com/Qleoz12/Medellin-java-streams</p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Java/JDK8" /><summary type="html"><![CDATA[Concept]]></summary></entry></feed>