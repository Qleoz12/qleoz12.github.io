<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-06-09T16:58:27-05:00</updated><id>/feed.xml</id><title type="html">Dann Brown Adventures</title><subtitle>An amazing website.</subtitle><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><entry><title type="html">Iterator Pattern</title><link href="/fundamentals/patterns/patterns-iterator/" rel="alternate" type="text/html" title="Iterator Pattern" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-iterator</id><content type="html" xml:base="/fundamentals/patterns/patterns-iterator/"><![CDATA[<p>This is an example for implementation for Iterator pattern</p>

<h2 id="concept">Concept</h2>
<p>the Iterator Pattern provides a way to access the elements
of an aggregate object sequentially without exposing its
underlying representation.</p>

<p>the situation is when you must to face several ways to create some kind element depeding combination of several parameters 
<img src="/assets/images/pattern_builder.png" alt="alt" /></p>

<p>Separate the construction of a complex object from its representation so that the
same construction process can create different representations</p>

<p>itÂ´s looks similar at umls repreentation but its focus an abstraction how exposes the easy way for set all needs for create the object requiered
<img src="/assets/images/pattern_builder-1.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of builder patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the builder pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
	
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">);</span>
	
	<span class="kd">public</span> <span class="nc">Vacation</span> <span class="nf">getVacation</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Vacation</span> <span class="n">vacation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Vacation</span><span class="o">();</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setAccommodations</span><span class="o">(</span><span class="n">accommodations</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setEvents</span><span class="o">(</span><span class="n">events</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">vacation</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vacation</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAccommodations</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span> <span class="o">=</span> <span class="n">accommodations</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEvents</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span> <span class="o">=</span> <span class="n">events</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringBuffer</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"---- "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">" ----\n"</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Accommodation</span> <span class="n">a</span> <span class="o">:</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">e</span> <span class="o">:</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">e</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">display</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tent</span> <span class="kd">extends</span> <span class="nc">Accommodation</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">siteNumber</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Tent"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSiteNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSiteNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLocation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">siteNumber</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="s">"Site number "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutdoorsVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">OutdoorsVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Outdoorsy Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Tent</span> <span class="n">tent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setSiteNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tent</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hike: "</span> <span class="o">+</span> <span class="n">event</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CityVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">CityVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"City Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Hotel</span> <span class="n">hotel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setRoomNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hotel</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"See the "</span> <span class="o">+</span> <span class="n">event</span> <span class="o">+</span> <span class="s">" show"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">VacationBuilder</span> <span class="n">outdoorsyVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OutdoorsVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">outdoorsyVacation</span> <span class="o">=</span> <span class="n">outdoorsyVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">34</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Beach"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Mountains"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">outdoorsyVacation</span><span class="o">);</span>
		
		<span class="nc">VacationBuilder</span> <span class="n">cityVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CityVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">cityVacation</span> <span class="o">=</span> <span class="n">cityVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Grand Facadian"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Hotel Commander"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Cirque du Soleil"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityVacation</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Iterator pattern]]></summary></entry><entry><title type="html">Strategy Pattern</title><link href="/fundamentals/patterns/patterns-strategy/" rel="alternate" type="text/html" title="Strategy Pattern" /><published>2022-04-25T00:00:00-05:00</published><updated>2022-04-25T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-strategy</id><content type="html" xml:base="/fundamentals/patterns/patterns-strategy/"><![CDATA[<p>This is an example for implementation for Strategy pattern</p>

<h2 id="concept">Concept</h2>
<p>The Strategy Pattern, which lets you define a family of algorithms, encapsulate each algorithm
(called a strategy), and select an algorithm at run time. An example for several filter on a farmer app 
to get apples base on criteria, you can see these criteria as different behaviors for the filter method. For more info, check strategy design pattern 
(see http://en.wikipedia.org/wiki/Strategy_pattern)</p>

<p>the situation is when you must face several ways to filter the apples base on criteria like weight or color or both and also another ways wil be required</p>

<p><img src="/assets/images/pattern-strategy_z1.png" alt="alt" />
simple filter by color</p>

<p><img src="/assets/images/pattern-strategy_z2.png" alt="alt" />
simple parametrized filter by color</p>

<p><img src="/assets/images/pattern-strategy_z3.png" alt="alt" />
simple parametrized filter by weight</p>

<p>in the previous images you can see the easy way to resolve the problem , implicates to repeat the code less the bold text
itâs looks fits, but it breaks the DRY (donât repeat yourself) principle of software engineering. 
So if you must mix the filters or opend the code for new filter unknow currently</p>

<p><img src="/assets/images/pattern-strategy_z4.png" alt="alt" />
this image show a bad implementation for conbine the filters of color and weight</p>

<p>perhaps, if you re-think the problem a decouple the behavior you requiered you can realize this strategy pattern applied to this situation 
<img src="/assets/images/pattern-strategy_z6.png" alt="alt" /></p>

<p>But it implies you must create a new class for each new requirement you have to add to the farmer app, but if it class is for single use
then you could use lambda expressions for simplify more the code and get more cleaner and less complexity on development
check the las lines on main class for see the new improvement.</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Strategy patterns, it will be a series to implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the builder pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP with functional programming like lambdas functions</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">a</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleWeightPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleColorPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">class</span> <span class="nc">AppleRedAndHeavyPredicate</span> <span class="kd">implements</span> <span class="nc">ApplePredicate</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span> <span class="o">&amp;&amp;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">inventory</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">),</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">155</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">),</span>
        <span class="k">new</span> <span class="nf">Apple</span><span class="o">(</span><span class="mi">120</span><span class="o">,</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">));</span>

		<span class="c1">// [Apple{color=GREEN, weight=80}, Apple{color=GREEN, weight=155}]</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">greenApples2</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleColorPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">greenApples2</span><span class="o">);</span>

    <span class="c1">// [Apple{color=GREEN, weight=155}]</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">heavyApples</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleWeightPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">heavyApples</span><span class="o">);</span>

    <span class="c1">// []</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">redAndHeavyApples</span> <span class="o">=</span> <span class="n">filter</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AppleRedAndHeavyPredicate</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">redAndHeavyApples</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="c1">//Update JAVA 8 lambda Expresions for once use symplifies set of clasess</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>  <span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">RED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()));</span>

	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>  <span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="nc">Color</span><span class="o">.</span><span class="na">RED</span> <span class="o">&amp;&amp;</span> <span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">;);</span>
	
<span class="o">}</span>
</code></pre></div></div>
<p>finally I add this picture to resume the idea of strategy pattern to conclude the topic
<img src="/assets/images/pattern-strategy_z5.png" alt="alt" /></p>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Strategy pattern]]></summary></entry><entry><title type="html">Builder Pattern</title><link href="/fundamentals/patterns/patterns-builder/" rel="alternate" type="text/html" title="Builder Pattern" /><published>2022-04-24T00:00:00-05:00</published><updated>2022-04-24T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-builder</id><content type="html" xml:base="/fundamentals/patterns/patterns-builder/"><![CDATA[<p>This is an example for implementation for Builder pattern</p>

<h2 id="concept">Concept</h2>
<p>Use the BuilderPattern to encapsulate the construction of a
product and allow it to be constructed in steps.</p>

<p>the situation is when you must to face several ways to create some kind element depeding combination of several parameters 
<img src="/assets/images/pattern_builder.png" alt="alt" /></p>

<p>Separate the construction of a complex object from its representation so that the
same construction process can create different representations</p>

<p>itÂ´s looks similar at umls repreentation but its focus an abstraction how exposes the easy way for set all needs for create the object requiered
<img src="/assets/images/pattern_builder-1.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of builder patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the builder pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
	
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">);</span>
	
	<span class="kd">public</span> <span class="nc">Vacation</span> <span class="nf">getVacation</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Vacation</span> <span class="n">vacation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Vacation</span><span class="o">();</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setAccommodations</span><span class="o">(</span><span class="n">accommodations</span><span class="o">);</span>
		<span class="n">vacation</span><span class="o">.</span><span class="na">setEvents</span><span class="o">(</span><span class="n">events</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">vacation</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vacation</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;();</span>
	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAccommodations</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Accommodation</span><span class="o">&gt;</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span> <span class="o">=</span> <span class="n">accommodations</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEvents</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span> <span class="o">=</span> <span class="n">events</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringBuffer</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"---- "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">" ----\n"</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Accommodation</span> <span class="n">a</span> <span class="o">:</span> <span class="n">accommodations</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">e</span> <span class="o">:</span> <span class="n">events</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">e</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">display</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tent</span> <span class="kd">extends</span> <span class="nc">Accommodation</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">siteNumber</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Tent"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nf">Tent</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSiteNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSiteNumber</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getLocation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">siteNumber</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="s">"Site number "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">siteNumber</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutdoorsVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">OutdoorsVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"Outdoorsy Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Tent</span> <span class="n">tent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tent</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">tent</span><span class="o">.</span><span class="na">setSiteNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tent</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Hike: "</span> <span class="o">+</span> <span class="n">event</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CityVacationBuilder</span> <span class="kd">extends</span> <span class="nc">VacationBuilder</span> <span class="o">{</span>	
	<span class="kd">public</span> <span class="nf">CityVacationBuilder</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"City Vacation Builder"</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">());</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addAccommodation</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">year</span><span class="o">,</span> <span class="kt">int</span> <span class="n">month</span><span class="o">,</span> <span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Reservation</span> <span class="n">reservation</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Reservation</span><span class="o">();</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setArrivalDate</span><span class="o">(</span><span class="n">year</span><span class="o">,</span> <span class="n">month</span><span class="o">,</span> <span class="n">day</span><span class="o">);</span>
		<span class="n">reservation</span><span class="o">.</span><span class="na">setNights</span><span class="o">(</span><span class="n">nights</span><span class="o">);</span>
		
		<span class="nc">Hotel</span> <span class="n">hotel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hotel</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setReservation</span><span class="o">(</span><span class="n">reservation</span><span class="o">);</span>
		<span class="n">hotel</span><span class="o">.</span><span class="na">setRoomNumber</span><span class="o">(</span><span class="n">location</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">accommodations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hotel</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">VacationBuilder</span> <span class="nf">addEvent</span><span class="o">(</span><span class="nc">String</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">events</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"See the "</span> <span class="o">+</span> <span class="n">event</span> <span class="o">+</span> <span class="s">" show"</span><span class="o">);</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">VacationBuilder</span> <span class="n">outdoorsyVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OutdoorsVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">outdoorsyVacation</span> <span class="o">=</span> <span class="n">outdoorsyVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">34</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Beach"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Two person tent"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Mountains"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">outdoorsyVacation</span><span class="o">);</span>
		
		<span class="nc">VacationBuilder</span> <span class="n">cityVacationBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CityVacationBuilder</span><span class="o">();</span>
		<span class="nc">Vacation</span> <span class="n">cityVacation</span> <span class="o">=</span> <span class="n">cityVacationBuilder</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Grand Facadian"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addAccommodation</span><span class="o">(</span><span class="s">"Hotel Commander"</span><span class="o">,</span> <span class="mi">2020</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span>
				<span class="o">.</span><span class="na">addEvent</span><span class="o">(</span><span class="s">"Cirque du Soleil"</span><span class="o">)</span>
				<span class="o">.</span><span class="na">getVacation</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cityVacation</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Builder pattern]]></summary></entry><entry><title type="html">Facade Pattern</title><link href="/fundamentals/patterns/patterns-Facade/" rel="alternate" type="text/html" title="Facade Pattern" /><published>2022-04-21T00:00:00-05:00</published><updated>2022-04-21T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-Facade</id><content type="html" xml:base="/fundamentals/patterns/patterns-Facade/"><![CDATA[<p>This is an example for implementation for Facade pattern</p>

<h2 id="concept">Concept</h2>

<p>The Facade Pattern provides a unified interface to a set of
interfaces in a subsystem. Facade defines a higher-level
interface that makes the subsystem easier to use.</p>

<p>the next picture ilustrase easy the main idea.</p>

<p><img src="/assets/images/pattern_facade.png" alt="alt" /></p>

<p>bese on the book âHead First Design Patterns Building Extensible and Maintainable Object-Oriented Software 
(Eric Freeman Elisabeth Robson) â it describe how the aproach is reduce the interaction between object and 
pass the respoability to comunicate oit to a facade. it inforces to reduce the chain of objects you mus to
interact for rech some functionality</p>

<p>for example</p>

<p><img src="/assets/images/pattern_facade2.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of Facade patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Facade pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeTheaterFacade</span> <span class="o">{</span>
	<span class="nc">Amplifier</span> <span class="n">amp</span><span class="o">;</span>
	<span class="nc">Tuner</span> <span class="n">tuner</span><span class="o">;</span>
	<span class="nc">StreamingPlayer</span> <span class="n">player</span><span class="o">;</span>
	<span class="nc">CdPlayer</span> <span class="n">cd</span><span class="o">;</span>
	<span class="nc">Projector</span> <span class="n">projector</span><span class="o">;</span>
	<span class="nc">TheaterLights</span> <span class="n">lights</span><span class="o">;</span>
	<span class="nc">Screen</span> <span class="n">screen</span><span class="o">;</span>
	<span class="nc">PopcornPopper</span> <span class="n">popper</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">HomeTheaterFacade</span><span class="o">(</span><span class="nc">Amplifier</span> <span class="n">amp</span><span class="o">,</span> 
				 <span class="nc">Tuner</span> <span class="n">tuner</span><span class="o">,</span> 
				 <span class="nc">StreamingPlayer</span> <span class="n">player</span><span class="o">,</span> 
				 <span class="nc">Projector</span> <span class="n">projector</span><span class="o">,</span> 
				 <span class="nc">Screen</span> <span class="n">screen</span><span class="o">,</span>
				 <span class="nc">TheaterLights</span> <span class="n">lights</span><span class="o">,</span>
				 <span class="nc">PopcornPopper</span> <span class="n">popper</span><span class="o">)</span> <span class="o">{</span>
 
		<span class="k">this</span><span class="o">.</span><span class="na">amp</span> <span class="o">=</span> <span class="n">amp</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">tuner</span> <span class="o">=</span> <span class="n">tuner</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">player</span> <span class="o">=</span> <span class="n">player</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">projector</span> <span class="o">=</span> <span class="n">projector</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">screen</span> <span class="o">=</span> <span class="n">screen</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">lights</span> <span class="o">=</span> <span class="n">lights</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">popper</span> <span class="o">=</span> <span class="n">popper</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">watchMovie</span><span class="o">(</span><span class="nc">String</span> <span class="n">movie</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Get ready to watch a movie..."</span><span class="o">);</span>
		<span class="n">popper</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">popper</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
		<span class="n">lights</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">screen</span><span class="o">.</span><span class="na">down</span><span class="o">();</span>
		<span class="n">projector</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">projector</span><span class="o">.</span><span class="na">wideScreenMode</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">setStreamingPlayer</span><span class="o">(</span><span class="n">player</span><span class="o">);</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">setSurroundSound</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">setVolume</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
		<span class="n">player</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">player</span><span class="o">.</span><span class="na">play</span><span class="o">(</span><span class="n">movie</span><span class="o">);</span>
	<span class="o">}</span>
 
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">endMovie</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Shutting movie theater down..."</span><span class="o">);</span>
		<span class="n">popper</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
		<span class="n">lights</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">screen</span><span class="o">.</span><span class="na">up</span><span class="o">();</span>
		<span class="n">projector</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
		<span class="n">player</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
		<span class="n">player</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">listenToRadio</span><span class="o">(</span><span class="kt">double</span> <span class="n">frequency</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Tuning in the airwaves..."</span><span class="o">);</span>
		<span class="n">tuner</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">tuner</span><span class="o">.</span><span class="na">setFrequency</span><span class="o">(</span><span class="n">frequency</span><span class="o">);</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">setVolume</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">setTuner</span><span class="o">(</span><span class="n">tuner</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">endRadio</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Shutting down the tuner..."</span><span class="o">);</span>
		<span class="n">tuner</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
		<span class="n">amp</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ImageComponent</span> <span class="kd">extends</span> <span class="nc">JComponent</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Icon</span> <span class="n">icon</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">ImageComponent</span><span class="o">(</span><span class="nc">Icon</span> <span class="n">icon</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">icon</span> <span class="o">=</span> <span class="n">icon</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIcon</span><span class="o">(</span><span class="nc">Icon</span> <span class="n">icon</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">icon</span> <span class="o">=</span> <span class="n">icon</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">paintComponent</span><span class="o">(</span><span class="nc">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">paintComponent</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">icon</span><span class="o">.</span><span class="na">getIconWidth</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">icon</span><span class="o">.</span><span class="na">getIconHeight</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="mi">800</span> <span class="o">-</span> <span class="n">w</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="mi">600</span> <span class="o">-</span> <span class="n">h</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
		<span class="n">icon</span><span class="o">.</span><span class="na">paintIcon</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Amplifier</span> <span class="n">amp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Amplifier</span><span class="o">(</span><span class="s">"Amplifier"</span><span class="o">);</span>
		<span class="nc">Tuner</span> <span class="n">tuner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Tuner</span><span class="o">(</span><span class="s">"AM/FM Tuner"</span><span class="o">,</span> <span class="n">amp</span><span class="o">);</span>
		<span class="nc">StreamingPlayer</span> <span class="n">player</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamingPlayer</span><span class="o">(</span><span class="s">"Streaming Player"</span><span class="o">,</span> <span class="n">amp</span><span class="o">);</span>
		<span class="nc">CdPlayer</span> <span class="n">cd</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CdPlayer</span><span class="o">(</span><span class="s">"CD Player"</span><span class="o">,</span> <span class="n">amp</span><span class="o">);</span>
		<span class="nc">Projector</span> <span class="n">projector</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Projector</span><span class="o">(</span><span class="s">"Projector"</span><span class="o">,</span> <span class="n">player</span><span class="o">);</span>
		<span class="nc">TheaterLights</span> <span class="n">lights</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TheaterLights</span><span class="o">(</span><span class="s">"Theater Ceiling Lights"</span><span class="o">);</span>
		<span class="nc">Screen</span> <span class="n">screen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Screen</span><span class="o">(</span><span class="s">"Theater Screen"</span><span class="o">);</span>
		<span class="nc">PopcornPopper</span> <span class="n">popper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PopcornPopper</span><span class="o">(</span><span class="s">"Popcorn Popper"</span><span class="o">);</span>
 
		<span class="nc">HomeTheaterFacade</span> <span class="n">homeTheater</span> <span class="o">=</span> 
				<span class="k">new</span> <span class="nf">HomeTheaterFacade</span><span class="o">(</span><span class="n">amp</span><span class="o">,</span> <span class="n">tuner</span><span class="o">,</span> <span class="n">player</span><span class="o">,</span> 
						<span class="n">projector</span><span class="o">,</span> <span class="n">screen</span><span class="o">,</span> <span class="n">lights</span><span class="o">,</span> <span class="n">popper</span><span class="o">);</span>
 
		<span class="n">homeTheater</span><span class="o">.</span><span class="na">watchMovie</span><span class="o">(</span><span class="s">"Raiders of the Lost Ark"</span><span class="o">);</span>
		<span class="n">homeTheater</span><span class="o">.</span><span class="na">endMovie</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Facade pattern]]></summary></entry><entry><title type="html">Bridge Pattern</title><link href="/fundamentals/patterns/patterns-bridge/" rel="alternate" type="text/html" title="Bridge Pattern" /><published>2022-04-21T00:00:00-05:00</published><updated>2022-04-21T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-bridge</id><content type="html" xml:base="/fundamentals/patterns/patterns-bridge/"><![CDATA[<p>This is an example for implementation for Bridge pattern</p>

<h2 id="concept">Concept</h2>

<p>Use the Bridge Pattern to vary not only your implementations but also your abstractions.</p>

<p>the next picture ilustrase easy the main idea.</p>

<p><img src="/assets/images/pattern-bridge-1.png" alt="alt" /></p>

<p>when you have Abstraction and implementation(in the future it becomes in another abstraction), 
we can face we are creating a cartesian product, which is hell because it increments exponentially the code 
and Thatâs a very common issue with class inheritance, then came the bridge pattern for saving the sake, 
for avoiding that, the bridge pattern specifies the dependency implementation switch the inheritance 
for object composition, it allows changes on the implementation and the abstraction regardless</p>

<p>for example</p>

<p><img src="/assets/images/pattern-bridge-2.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of bridge patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the bridge pattern and how in the MainClass call all implemantation
for show usage, you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Shape</span> <span class="o">{</span>

    <span class="kd">protected</span> <span class="nc">Color</span> <span class="n">color</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="nf">Shape</span><span class="o">(</span><span class="nc">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="nc">Color</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">abstract</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Color</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">String</span> <span class="n">color</span><span class="o">;</span>
    
    <span class="kd">protected</span> <span class="nf">Color</span><span class="o">(</span><span class="nc">String</span> <span class="nc">Color</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="nc">Color</span><span class="o">;</span>
    <span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">();</span>

	<span class="c1">//getters</span>
	<span class="c1">//seters</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Triangle</span> <span class="kd">extends</span> <span class="nc">Shape</span><span class="o">{</span>

	<span class="kd">public</span> <span class="nf">Triangle</span><span class="o">(</span><span class="nc">Color</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Triangle filled with color "</span><span class="o">);</span>
		<span class="n">color</span><span class="o">.</span><span class="na">applyColor</span><span class="o">();</span>
	<span class="o">}</span> 

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pentagon</span> <span class="kd">extends</span> <span class="nc">Shape</span><span class="o">{</span>

	<span class="kd">public</span> <span class="nf">Pentagon</span><span class="o">(</span><span class="nc">Color</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Pentagon filled with color "</span><span class="o">);</span>
		<span class="n">color</span><span class="o">.</span><span class="na">applyColor</span><span class="o">();</span>
	<span class="o">}</span> 

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedColor</span> <span class="kd">implements</span> <span class="nc">Color</span><span class="o">{</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"red."</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreenColor</span> <span class="kd">implements</span> <span class="nc">Color</span><span class="o">{</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">applyColor</span><span class="o">(){</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"green."</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	 <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="nc">Shape</span> <span class="n">tri</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Triangle</span><span class="o">(</span><span class="k">new</span> <span class="nc">RedColor</span><span class="o">());</span>
		<span class="n">tri</span><span class="o">.</span><span class="na">applyColor</span><span class="o">();</span>

		<span class="nc">Shape</span> <span class="n">pent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pentagon</span><span class="o">(</span><span class="k">new</span> <span class="nc">GreenColor</span><span class="o">());</span>
		<span class="n">pent</span><span class="o">.</span><span class="na">applyColor</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Bridge pattern]]></summary></entry><entry><title type="html">Proxy Pattern</title><link href="/fundamentals/patterns/patterns-proxy/" rel="alternate" type="text/html" title="Proxy Pattern" /><published>2022-04-20T00:00:00-05:00</published><updated>2022-04-20T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-proxy</id><content type="html" xml:base="/fundamentals/patterns/patterns-proxy/"><![CDATA[<p>This is an example for implementation for Proxy pattern</p>

<h2 id="concept">Concept</h2>

<p>The Proxy Pattern provides a surrogate or placeholder for
another object to control access to it.</p>

<p>The pattern illustrates how a proxy class can interact with another and, internally,
it connects to the real service or implementation class that provides the functionality.</p>

<p><img src="/assets/images/pattern_proxy.png" alt="alt" /></p>

<p>the software talks with proxy class, proxy class connects with the service over network</p>

<h3 id="java">java</h3>
<p>Java exposes a technology called RMI (Remote Method Invocation), it allows connect the proxy client class
with the real service class throught net, its permits make remote calls from the local class to remote class
keeping in mind the estrcture you must to folow</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Proxy patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Proxy pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ImageProxy</span> <span class="kd">implements</span> <span class="nc">Icon</span> <span class="o">{</span>
	<span class="kd">volatile</span> <span class="nc">ImageIcon</span> <span class="n">imageIcon</span><span class="o">;</span>
	<span class="kd">final</span> <span class="no">URL</span> <span class="n">imageURL</span><span class="o">;</span>
	<span class="nc">Thread</span> <span class="n">retrievalThread</span><span class="o">;</span>
	<span class="kt">boolean</span> <span class="n">retrieving</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
     
	<span class="kd">public</span> <span class="nf">ImageProxy</span><span class="o">(</span><span class="no">URL</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span> <span class="n">imageURL</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span> <span class="o">}</span>
     
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getIconWidth</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">imageIcon</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">imageIcon</span><span class="o">.</span><span class="na">getIconWidth</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="k">return</span> <span class="mi">800</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getIconHeight</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">imageIcon</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">imageIcon</span><span class="o">.</span><span class="na">getIconHeight</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="k">return</span> <span class="mi">600</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setImageIcon</span><span class="o">(</span><span class="nc">ImageIcon</span> <span class="n">imageIcon</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">imageIcon</span> <span class="o">=</span> <span class="n">imageIcon</span><span class="o">;</span>
	<span class="o">}</span>
     
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">paintIcon</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Component</span> <span class="n">c</span><span class="o">,</span> <span class="nc">Graphics</span>  <span class="n">g</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span>  <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">imageIcon</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">imageIcon</span><span class="o">.</span><span class="na">paintIcon</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">g</span><span class="o">.</span><span class="na">drawString</span><span class="o">(</span><span class="s">"Loading album cover, please wait..."</span><span class="o">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">300</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">190</span><span class="o">);</span>
			<span class="k">if</span> <span class="o">(!</span><span class="n">retrieving</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">retrieving</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
				
				<span class="n">retrievalThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">Runnable</span><span class="o">()</span> <span class="o">{</span>
					<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
						<span class="k">try</span> <span class="o">{</span>
							<span class="n">setImageIcon</span><span class="o">(</span><span class="k">new</span> <span class="nc">ImageIcon</span><span class="o">(</span><span class="n">imageURL</span><span class="o">,</span> <span class="s">"Album Cover"</span><span class="o">));</span>
							<span class="n">c</span><span class="o">.</span><span class="na">repaint</span><span class="o">();</span>
						<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
							<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
						<span class="o">}</span>
					<span class="o">}</span>
				<span class="o">});</span>
				
				<span class="n">retrievalThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
						<span class="k">try</span> <span class="o">{</span>
							<span class="n">setImageIcon</span><span class="o">(</span><span class="k">new</span> <span class="nc">ImageIcon</span><span class="o">(</span><span class="n">imageURL</span><span class="o">,</span> <span class="s">"Album Cover"</span><span class="o">));</span>
							<span class="n">c</span><span class="o">.</span><span class="na">repaint</span><span class="o">();</span>
						<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
							<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
						<span class="o">}</span>
				<span class="o">});</span>
				<span class="n">retrievalThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
				
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ImageComponent</span> <span class="kd">extends</span> <span class="nc">JComponent</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Icon</span> <span class="n">icon</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">ImageComponent</span><span class="o">(</span><span class="nc">Icon</span> <span class="n">icon</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">icon</span> <span class="o">=</span> <span class="n">icon</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIcon</span><span class="o">(</span><span class="nc">Icon</span> <span class="n">icon</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">icon</span> <span class="o">=</span> <span class="n">icon</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">paintComponent</span><span class="o">(</span><span class="nc">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">.</span><span class="na">paintComponent</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">icon</span><span class="o">.</span><span class="na">getIconWidth</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">icon</span><span class="o">.</span><span class="na">getIconHeight</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="mi">800</span> <span class="o">-</span> <span class="n">w</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">(</span><span class="mi">600</span> <span class="o">-</span> <span class="n">h</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
		<span class="n">icon</span><span class="o">.</span><span class="na">paintIcon</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>

	<span class="nc">ImageComponent</span> <span class="n">imageComponent</span><span class="o">;</span>
	<span class="nc">JFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JFrame</span><span class="o">(</span><span class="s">"Album Cover Viewer"</span><span class="o">);</span>
	<span class="nc">JMenuBar</span> <span class="n">menuBar</span><span class="o">;</span>
	<span class="nc">JMenu</span> <span class="n">menu</span><span class="o">;</span>
	<span class="nc">Hashtable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">albums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hashtable</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;();</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="nc">ImageProxyTestDrive</span> <span class="n">testDrive</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageProxyTestDrive</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nf">ImageProxyTestDrive</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Buddha Bar"</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B00009XBYK.01.LZZZZZZZ.jpg"</span><span class="o">);</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Ima"</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B000005IRM.01.LZZZZZZZ.jpg"</span><span class="o">);</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Karma"</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B000005DCB.01.LZZZZZZZ.gif"</span><span class="o">);</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"MCMXC a.D."</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B000002URV.01.LZZZZZZZ.jpg"</span><span class="o">);</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Northern Exposure"</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B000003SFN.01.LZZZZZZZ.jpg"</span><span class="o">);</span>
		<span class="n">albums</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Selected Ambient Works, Vol. 2"</span><span class="o">,</span><span class="s">"http://images.amazon.com/images/P/B000002MNZ.01.LZZZZZZZ.jpg"</span><span class="o">);</span>

		<span class="no">URL</span> <span class="n">initialURL</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span><span class="n">albums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"Selected Ambient Works, Vol. 2"</span><span class="o">));</span>
		<span class="n">menuBar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JMenuBar</span><span class="o">();</span>
		<span class="n">menu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JMenu</span><span class="o">(</span><span class="s">"Favorite Albums"</span><span class="o">);</span>
		<span class="n">menuBar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">menu</span><span class="o">);</span>
		<span class="n">frame</span><span class="o">.</span><span class="na">setJMenuBar</span><span class="o">(</span><span class="n">menuBar</span><span class="o">);</span>

		<span class="k">for</span> <span class="o">(</span><span class="nc">Enumeration</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">albums</span><span class="o">.</span><span class="na">keys</span><span class="o">();</span> <span class="n">e</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">();)</span> <span class="o">{</span>
			<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
			<span class="nc">JMenuItem</span> <span class="n">menuItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JMenuItem</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
			<span class="n">menu</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">menuItem</span><span class="o">);</span> 
			<span class="n">menuItem</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="n">event</span> <span class="o">-&gt;</span> <span class="o">{</span>
				<span class="n">imageComponent</span><span class="o">.</span><span class="na">setIcon</span><span class="o">(</span><span class="k">new</span> <span class="nc">ImageProxy</span><span class="o">(</span><span class="n">getAlbumUrl</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getActionCommand</span><span class="o">())));</span>
				<span class="n">frame</span><span class="o">.</span><span class="na">repaint</span><span class="o">();</span>
			<span class="o">});</span>
		<span class="o">}</span>

		<span class="c1">// set up frame and menus</span>

		<span class="nc">Icon</span> <span class="n">icon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageProxy</span><span class="o">(</span><span class="n">initialURL</span><span class="o">);</span>
		<span class="n">imageComponent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ImageComponent</span><span class="o">(</span><span class="n">icon</span><span class="o">);</span>
		<span class="n">frame</span><span class="o">.</span><span class="na">getContentPane</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">imageComponent</span><span class="o">);</span>
		<span class="n">frame</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
		<span class="n">frame</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">800</span><span class="o">,</span><span class="mi">600</span><span class="o">);</span>
		<span class="n">frame</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

	<span class="o">}</span>

	<span class="no">URL</span> <span class="nf">getAlbumUrl</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">URL</span><span class="o">((</span><span class="nc">String</span><span class="o">)</span><span class="n">albums</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">));</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Proxy pattern]]></summary></entry><entry><title type="html">Singleton Pattern</title><link href="/fundamentals/patterns/patterns-singleton/" rel="alternate" type="text/html" title="Singleton Pattern" /><published>2022-04-19T00:00:00-05:00</published><updated>2022-04-19T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-singleton</id><content type="html" xml:base="/fundamentals/patterns/patterns-singleton/"><![CDATA[<p>This is an example for implementation for singleton pattern</p>

<h2 id="concept">Concept</h2>

<p>The Singleton Pattern ensures a class has only one instance,
and provides a global point of access to it. this pattern prevent the classes 
create new instances of the class designed for be singleton.</p>

<p>singleton is often aplied for create a global resource and all uses of that requiered resource use the same instance,
for improve de handle of memory, performarce or avoid overuse, singleton is a good aproach if you must to control the number of instances youâre creating</p>

<p class="notice--info"><strong>Note:</strong> this is an example of singleton patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the singleton pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<p>clasical abstraccion</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="n">uniqueInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
 
	<span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
 
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">uniqueInstance</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// other useful methods here</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"I'm a statically initialized Singleton!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>for handle multithreading , you must âsynchronizedâ the acces for avoid locks</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="n">uniqueInstance</span><span class="o">;</span>
 
	<span class="c1">// other useful instance variables here</span>
 
	<span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">uniqueInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">uniqueInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">uniqueInstance</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="c1">// other useful methods here</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"I'm a thread safe Singleton!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    
	<span class="n">ppublic</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">// for safe threadsafe</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass2</span> <span class="o">{</span>
    
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//the code is the same , but try it from different instances</span>
		<span class="nc">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for singleton pattern]]></summary></entry><entry><title type="html">Adapter Pattern</title><link href="/fundamentals/patterns/patterns-adapter/" rel="alternate" type="text/html" title="Adapter Pattern" /><published>2022-04-18T00:00:00-05:00</published><updated>2022-04-18T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-adapter</id><content type="html" xml:base="/fundamentals/patterns/patterns-adapter/"><![CDATA[<p>This is an example for implementation for Adapter pattern</p>

<h2 id="concept">concept</h2>

<p>The Adapter Pattern converts the interface of a class into
another interface the clients expect. Adapter lets classes work
together that couldnât otherwise because of incompatible
interfaces</p>

<p>the situation is when you must to face several ways to create som kind element depeding combination of several parameters 
<img src="/assets/images/pattern_builder.png" alt="alt" /></p>

<p class="notice--info"><strong>Note:</strong> this is an example of Adapter patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Adapter pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem ducks and turkeys</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TurkeyAdapter</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="nc">Turkey</span> <span class="n">turkey</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">TurkeyAdapter</span><span class="o">(</span><span class="nc">Turkey</span> <span class="n">turkey</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">turkey</span> <span class="o">=</span> <span class="n">turkey</span><span class="o">;</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">gobble</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">turkey</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckAdapter</span> <span class="kd">implements</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="nc">Duck</span> <span class="n">duck</span><span class="o">;</span>
	<span class="nc">Random</span> <span class="n">rand</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">DuckAdapter</span><span class="o">(</span><span class="nc">Duck</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">duck</span> <span class="o">=</span> <span class="n">duck</span><span class="o">;</span>
		<span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>  <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		     <span class="n">duck</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Drone</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">beep</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">spin_rotors</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take_off</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DroneAdapter</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="nc">Drone</span> <span class="n">drone</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">DroneAdapter</span><span class="o">(</span><span class="nc">Drone</span> <span class="n">drone</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">drone</span> <span class="o">=</span> <span class="n">drone</span><span class="o">;</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">beep</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">spin_rotors</span><span class="o">();</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">take_off</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Quack"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm flying"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WildTurkey</span> <span class="kd">implements</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gobble gobble"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm flying a short distance"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperDrone</span> <span class="kd">implements</span> <span class="nc">Drone</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">beep</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Beep beep beep"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">spin_rotors</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Rotors are spinning"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take_off</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Taking off"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Duck</span> <span class="n">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">();</span>

		<span class="nc">Turkey</span> <span class="n">turkey</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WildTurkey</span><span class="o">();</span>
		<span class="nc">Duck</span> <span class="n">turkeyAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TurkeyAdapter</span><span class="o">(</span><span class="n">turkey</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The Turkey says..."</span><span class="o">);</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">gobble</span><span class="o">();</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe Duck says..."</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">duck</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe TurkeyAdapter says..."</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">turkeyAdapter</span><span class="o">);</span>
		
		<span class="c1">// Challenge</span>
		<span class="nc">Drone</span> <span class="n">drone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SuperDrone</span><span class="o">();</span>
		<span class="nc">Duck</span> <span class="n">droneAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DroneAdapter</span><span class="o">(</span><span class="n">drone</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">droneAdapter</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">testDuck</span><span class="o">(</span><span class="nc">Duck</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Adapter pattern]]></summary></entry><entry><title type="html">Command pattern</title><link href="/fundamentals/patterns/patterns-command/" rel="alternate" type="text/html" title="Command pattern" /><published>2022-04-17T00:00:00-05:00</published><updated>2022-04-17T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-command</id><content type="html" xml:base="/fundamentals/patterns/patterns-command/"><![CDATA[<p>This is an example for implementation for Command pattern</p>

<h2 id="concept">concept</h2>

<p>the command patterns encapsulates a request as an object, thereby letting you parameterize 
other objects with differet requests,queue or log requets and suport ubdoable operations.</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Command patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Command pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP on Pizzeria</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteControlWithUndo</span> <span class="o">{</span>
 <span class="nc">Command</span><span class="o">[]</span> <span class="n">onCommands</span><span class="o">;</span>
 <span class="nc">Command</span><span class="o">[]</span> <span class="n">offCommands</span><span class="o">;</span>
 <span class="nc">Command</span> <span class="n">undoCommand</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">RemoteControlWithUndo</span><span class="o">()</span> <span class="o">{</span>
	<span class="n">onCommands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">7</span><span class="o">];</span>
	<span class="n">offCommands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">7</span><span class="o">];</span>
	<span class="nc">Command</span> <span class="n">noCommand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NoCommand</span><span class="o">();</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">7</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">onCommands</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="n">offCommands</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="n">undoCommand</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">,</span> <span class="nc">Command</span> <span class="n">onCommand</span><span class="o">,</span> <span class="nc">Command</span> <span class="n">offCommand</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">]</span> <span class="o">=</span> <span class="n">onCommand</span><span class="o">;</span>
 <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">]</span> <span class="o">=</span> <span class="n">offCommand</span><span class="o">;</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onButtonWasPushed</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">].</span><span class="na">execute</span><span class="o">();</span>
 <span class="n">undoCommand</span> <span class="o">=</span> <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">];</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">offButtonWasPushed</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">].</span><span class="na">execute</span><span class="o">();</span>
 <span class="n">undoCommand</span> <span class="o">=</span> <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">];</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">undoButtonWasPushed</span><span class="o">()</span> <span class="o">{</span>
 <span class="n">undoCommand</span><span class="o">.</span><span class="na">undo</span><span class="o">();</span>
 <span class="o">}</span>
 
 <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
 <span class="c1">// toString code here...</span>
 <span class="o">}</span>

 <span class="o">}</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Light</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">location</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Light</span><span class="o">(</span><span class="nc">String</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">location</span> <span class="o">=</span> <span class="n">location</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">level</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is on"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">off</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is off"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dim</span><span class="o">(</span><span class="kt">int</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">level</span> <span class="o">=</span> <span class="n">level</span><span class="o">;</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">level</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">off</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is dimmed to "</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s">"%"</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLevel</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">level</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOffCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
	<span class="nc">Light</span> <span class="n">light</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">LightOffCommand</span><span class="o">(</span><span class="nc">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">light</span><span class="o">.</span><span class="na">getLevel</span><span class="o">();</span>
		<span class="n">light</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">light</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOnCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
	<span class="nc">Light</span> <span class="n">light</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">LightOnCommand</span><span class="o">(</span><span class="nc">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">light</span><span class="o">.</span><span class="na">getLevel</span><span class="o">();</span>
		<span class="n">light</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">light</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">RemoteControlWithUndo</span> <span class="n">remoteControl</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RemoteControlWithUndo</span><span class="o">();</span>
		<span class="nc">Light</span> <span class="n">livingRoomLight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Light</span><span class="o">(</span><span class="s">"Living Room"</span><span class="o">);</span>
		<span class="nc">LightOnCommand</span> <span class="n">livingRoomLightOn</span> <span class="o">=</span>  <span class="k">new</span> <span class="nc">LightOnCommand</span><span class="o">(</span><span class="n">livingRoomLight</span><span class="o">);</span>
		<span class="nc">LightOffCommand</span> <span class="n">livingRoomLightOff</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LightOffCommand</span><span class="o">(</span><span class="n">livingRoomLight</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">livingRoomLightOn</span><span class="o">,</span> <span class="n">livingRoomLightOff</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">onButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">offButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">remoteControl</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">undoButtonWasPushed</span><span class="o">();</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">offButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">onButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">remoteControl</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">undoButtonWasPushed</span><span class="o">();</span>

	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Command pattern]]></summary></entry><entry><title type="html">Factory pattern</title><link href="/fundamentals/patterns/patterns-factory/" rel="alternate" type="text/html" title="Factory pattern" /><published>2022-04-16T00:00:00-05:00</published><updated>2022-04-16T08:06:00-05:00</updated><id>/fundamentals/patterns/patterns-factory</id><content type="html" xml:base="/fundamentals/patterns/patterns-factory/"><![CDATA[<p>This is an example for implementation for factory pattern</p>

<h2 id="concept">concept</h2>

<p>All factory patter encapsulate object creation. The Factory
Method Patter encapsulates object creation by letting subclasses
decide what objects to create. Letâs check out these class diagrams to
see who the players are in this pattern</p>

<p>important:</p>
<ul>
  <li>simple factory is not considered a patterns</li>
</ul>

<p class="notice--info"><strong>Note:</strong> this is an example of factory patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the factory patter and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP on Pizzeria</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PizzaStore</span> <span class="o">{</span>
 
	<span class="kd">abstract</span> <span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">);</span>
 
	<span class="kd">public</span> <span class="nc">Pizza</span> <span class="nf">orderPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">createPizza</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Making a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---"</span><span class="o">);</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">bake</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">cut</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">box</span><span class="o">();</span>
		<span class="k">return</span> <span class="n">pizza</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Pizza</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">String</span> <span class="n">dough</span><span class="o">;</span>
	<span class="nc">String</span> <span class="n">sauce</span><span class="o">;</span>
	<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">toppings</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
 
	<span class="kt">void</span> <span class="nf">prepare</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Prepare "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Tossing dough..."</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adding sauce..."</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adding toppings: "</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">topping</span> <span class="o">:</span> <span class="n">toppings</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"   "</span> <span class="o">+</span> <span class="n">topping</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
  
	<span class="kt">void</span> <span class="nf">bake</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Bake for 25 minutes at 350"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cut the pizza into diagonal slices"</span><span class="o">);</span>
	<span class="o">}</span>
  
	<span class="kt">void</span> <span class="nf">box</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Place pizza in official PizzaStore box"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringBuffer</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"---- "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">" ----\n"</span><span class="o">);</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">dough</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">sauce</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">topping</span> <span class="o">:</span> <span class="n">toppings</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">topping</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">display</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PizzaStore</span> <span class="o">{</span>
 
	<span class="kd">abstract</span> <span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">);</span>
 
	<span class="kd">public</span> <span class="nc">Pizza</span> <span class="nf">orderPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">createPizza</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Making a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---"</span><span class="o">);</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">bake</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">cut</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">box</span><span class="o">();</span>
		<span class="k">return</span> <span class="n">pizza</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoPizzaStore</span> <span class="kd">extends</span> <span class="nc">PizzaStore</span> <span class="o">{</span>

	<span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        	<span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">))</span> <span class="o">{</span>
            		<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleCheesePizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"veggie"</span><span class="o">))</span> <span class="o">{</span>
        	    	<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleVeggiePizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"clam"</span><span class="o">))</span> <span class="o">{</span>
        	    	<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleClamPizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"pepperoni"</span><span class="o">))</span> <span class="o">{</span>
            		<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStylePepperoniPizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYPizzaStore</span> <span class="kd">extends</span> <span class="nc">PizzaStore</span> <span class="o">{</span>

	<span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleCheesePizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"veggie"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleVeggiePizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"clam"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleClamPizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"pepperoni"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStylePepperoniPizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoStyleCheesePizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">ChicagoStyleCheesePizza</span><span class="o">()</span> <span class="o">{</span> 
		<span class="n">name</span> <span class="o">=</span> <span class="s">"Chicago Style Deep Dish Cheese Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Extra Thick Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Plum Tomato Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shredded Mozzarella Cheese"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cutting the pizza into square slices"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoStyleClamPizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nf">ChicagoStyleClamPizza</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"Chicago Style Clam Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Extra Thick Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Plum Tomato Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shredded Mozzarella Cheese"</span><span class="o">);</span>
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Frozen Clams from Chesapeake Bay"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cutting the pizza into square slices"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYStyleCheesePizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">NYStyleCheesePizza</span><span class="o">()</span> <span class="o">{</span> 
		<span class="n">name</span> <span class="o">=</span> <span class="s">"NY Style Sauce and Cheese Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Thin Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Marinara Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Grated Reggiano Cheese"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYStyleClamPizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">NYStyleClamPizza</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"NY Style Clam Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Thin Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Marinara Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Grated Reggiano Cheese"</span><span class="o">);</span>
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Fresh Clams from Long Island Sound"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">PizzaStore</span> <span class="n">nyStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NYPizzaStore</span><span class="o">();</span>
		<span class="nc">PizzaStore</span> <span class="n">chicagoStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChicagoPizzaStore</span><span class="o">();</span>
 
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">nyStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Ethan ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
 
		<span class="n">pizza</span> <span class="o">=</span> <span class="n">chicagoStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Joel ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

		<span class="n">pizza</span> <span class="o">=</span> <span class="n">nyStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"clam"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Ethan ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
 
		<span class="n">pizza</span> <span class="o">=</span> <span class="n">chicagoStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"clam"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Joel ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for factory pattern]]></summary></entry></feed>