<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-19T13:17:05-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dann Brown Adventures</title><subtitle>An amazing website.</subtitle><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><entry><title type="html">Singleton Pattern</title><link href="http://localhost:4000/fundamentals/patterns/patterns-singleton/" rel="alternate" type="text/html" title="Singleton Pattern" /><published>2022-04-19T00:00:00-05:00</published><updated>2022-04-19T08:06:00-05:00</updated><id>http://localhost:4000/fundamentals/patterns/patterns-singleton</id><content type="html" xml:base="http://localhost:4000/fundamentals/patterns/patterns-singleton/"><![CDATA[<p>This is an example for implementation for singleton pattern</p>

<h2 id="concept">Concept</h2>

<p>The Singleton Pattern ensures a class has only one instance,
and provides a global point of access to it. this pattern prevent the classes 
create new instances of the class designed for be singleton.</p>

<p>singleton is often aplied for create a global resource and all uses of that requiered resource use the same instance,
for improve de handle of memory, performarce or avoid overuse, singleton is a good aproach if you must to control the number of instances you’re creating</p>

<p class="notice--info"><strong>Note:</strong> this is an example of singleton patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the singleton pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP</p>

<h2 id="abstraccions">abstraccions</h2>

<p>clasical abstraccion</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="n">uniqueInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
 
	<span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
 
	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">uniqueInstance</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// other useful methods here</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"I'm a statically initialized Singleton!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>for handle multithreading , you must “synchronized” the acces for avoid locks</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">Singleton</span> <span class="n">uniqueInstance</span><span class="o">;</span>
 
	<span class="c1">// other useful instance variables here</span>
 
	<span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
 
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="nc">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">uniqueInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">uniqueInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Singleton</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">uniqueInstance</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="c1">// other useful methods here</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"I'm a thread safe Singleton!"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    
	<span class="n">ppublic</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">// for safe threadsafe</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass2</span> <span class="o">{</span>
    
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//the code is the same , but try it from different instances</span>
		<span class="nc">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="nc">Singleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">singleton</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for singleton pattern]]></summary></entry><entry><title type="html">Adapter Pattern</title><link href="http://localhost:4000/fundamentals/patterns/patterns-adapter/" rel="alternate" type="text/html" title="Adapter Pattern" /><published>2022-04-18T00:00:00-05:00</published><updated>2022-04-18T08:06:00-05:00</updated><id>http://localhost:4000/fundamentals/patterns/patterns-adapter</id><content type="html" xml:base="http://localhost:4000/fundamentals/patterns/patterns-adapter/"><![CDATA[<p>This is an example for implementation for Adapter pattern</p>

<h2 id="concept">concept</h2>

<p>The Adapter Pattern converts the interface of a class into
another interface the clients expect. Adapter lets classes work
together that couldn’t otherwise because of incompatible
interfaces</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Adapter patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Adapter pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem ducks and turkeys</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TurkeyAdapter</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="nc">Turkey</span> <span class="n">turkey</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">TurkeyAdapter</span><span class="o">(</span><span class="nc">Turkey</span> <span class="n">turkey</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">turkey</span> <span class="o">=</span> <span class="n">turkey</span><span class="o">;</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">gobble</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">turkey</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckAdapter</span> <span class="kd">implements</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="nc">Duck</span> <span class="n">duck</span><span class="o">;</span>
	<span class="nc">Random</span> <span class="n">rand</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">DuckAdapter</span><span class="o">(</span><span class="nc">Duck</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">duck</span> <span class="o">=</span> <span class="n">duck</span><span class="o">;</span>
		<span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span>  <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		     <span class="n">duck</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Drone</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">beep</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">spin_rotors</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take_off</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DroneAdapter</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="nc">Drone</span> <span class="n">drone</span><span class="o">;</span>
 
	<span class="kd">public</span> <span class="nf">DroneAdapter</span><span class="o">(</span><span class="nc">Drone</span> <span class="n">drone</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">drone</span> <span class="o">=</span> <span class="n">drone</span><span class="o">;</span>
	<span class="o">}</span>
    
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">beep</span><span class="o">();</span>
	<span class="o">}</span>
  
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">spin_rotors</span><span class="o">();</span>
		<span class="n">drone</span><span class="o">.</span><span class="na">take_off</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MallardDuck</span> <span class="kd">implements</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Quack"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm flying"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WildTurkey</span> <span class="kd">implements</span> <span class="nc">Turkey</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">gobble</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gobble gobble"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm flying a short distance"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperDrone</span> <span class="kd">implements</span> <span class="nc">Drone</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">beep</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Beep beep beep"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">spin_rotors</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Rotors are spinning"</span><span class="o">);</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">take_off</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Taking off"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Duck</span> <span class="n">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MallardDuck</span><span class="o">();</span>

		<span class="nc">Turkey</span> <span class="n">turkey</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">WildTurkey</span><span class="o">();</span>
		<span class="nc">Duck</span> <span class="n">turkeyAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TurkeyAdapter</span><span class="o">(</span><span class="n">turkey</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The Turkey says..."</span><span class="o">);</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">gobble</span><span class="o">();</span>
		<span class="n">turkey</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe Duck says..."</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">duck</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe TurkeyAdapter says..."</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">turkeyAdapter</span><span class="o">);</span>
		
		<span class="c1">// Challenge</span>
		<span class="nc">Drone</span> <span class="n">drone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SuperDrone</span><span class="o">();</span>
		<span class="nc">Duck</span> <span class="n">droneAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DroneAdapter</span><span class="o">(</span><span class="n">drone</span><span class="o">);</span>
		<span class="n">testDuck</span><span class="o">(</span><span class="n">droneAdapter</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">testDuck</span><span class="o">(</span><span class="nc">Duck</span> <span class="n">duck</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">quack</span><span class="o">();</span>
		<span class="n">duck</span><span class="o">.</span><span class="na">fly</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Adapter pattern]]></summary></entry><entry><title type="html">Command pattern</title><link href="http://localhost:4000/fundamentals/patterns/patterns-command/" rel="alternate" type="text/html" title="Command pattern" /><published>2022-04-17T00:00:00-05:00</published><updated>2022-04-17T08:06:00-05:00</updated><id>http://localhost:4000/fundamentals/patterns/patterns-command</id><content type="html" xml:base="http://localhost:4000/fundamentals/patterns/patterns-command/"><![CDATA[<p>This is an example for implementation for Command pattern</p>

<h2 id="concept">concept</h2>

<p>the command patterns encapsulates a request as an object, thereby letting you parameterize 
other objects with differet requests,queue or log requets and suport ubdoable operations.</p>

<p class="notice--info"><strong>Note:</strong> this is an example of Command patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the Command pattern and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP on Pizzeria</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteControlWithUndo</span> <span class="o">{</span>
 <span class="nc">Command</span><span class="o">[]</span> <span class="n">onCommands</span><span class="o">;</span>
 <span class="nc">Command</span><span class="o">[]</span> <span class="n">offCommands</span><span class="o">;</span>
 <span class="nc">Command</span> <span class="n">undoCommand</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">RemoteControlWithUndo</span><span class="o">()</span> <span class="o">{</span>
	<span class="n">onCommands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">7</span><span class="o">];</span>
	<span class="n">offCommands</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Command</span><span class="o">[</span><span class="mi">7</span><span class="o">];</span>
	<span class="nc">Command</span> <span class="n">noCommand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NoCommand</span><span class="o">();</span>
	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">7</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">onCommands</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="n">offCommands</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="n">undoCommand</span> <span class="o">=</span> <span class="n">noCommand</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCommand</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">,</span> <span class="nc">Command</span> <span class="n">onCommand</span><span class="o">,</span> <span class="nc">Command</span> <span class="n">offCommand</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">]</span> <span class="o">=</span> <span class="n">onCommand</span><span class="o">;</span>
 <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">]</span> <span class="o">=</span> <span class="n">offCommand</span><span class="o">;</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onButtonWasPushed</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">].</span><span class="na">execute</span><span class="o">();</span>
 <span class="n">undoCommand</span> <span class="o">=</span> <span class="n">onCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">];</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">offButtonWasPushed</span><span class="o">(</span><span class="kt">int</span> <span class="n">slot</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">].</span><span class="na">execute</span><span class="o">();</span>
 <span class="n">undoCommand</span> <span class="o">=</span> <span class="n">offCommands</span><span class="o">[</span><span class="n">slot</span><span class="o">];</span>
 <span class="o">}</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">undoButtonWasPushed</span><span class="o">()</span> <span class="o">{</span>
 <span class="n">undoCommand</span><span class="o">.</span><span class="na">undo</span><span class="o">();</span>
 <span class="o">}</span>
 
 <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
 <span class="c1">// toString code here...</span>
 <span class="o">}</span>

 <span class="o">}</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Light</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">location</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Light</span><span class="o">(</span><span class="nc">String</span> <span class="n">location</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">location</span> <span class="o">=</span> <span class="n">location</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">on</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">level</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is on"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">off</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">level</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is off"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dim</span><span class="o">(</span><span class="kt">int</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">level</span> <span class="o">=</span> <span class="n">level</span><span class="o">;</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">level</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">off</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Light is dimmed to "</span> <span class="o">+</span> <span class="n">level</span> <span class="o">+</span> <span class="s">"%"</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getLevel</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">level</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOffCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
	<span class="nc">Light</span> <span class="n">light</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">LightOffCommand</span><span class="o">(</span><span class="nc">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">light</span><span class="o">.</span><span class="na">getLevel</span><span class="o">();</span>
		<span class="n">light</span><span class="o">.</span><span class="na">off</span><span class="o">();</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">light</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LightOnCommand</span> <span class="kd">implements</span> <span class="nc">Command</span> <span class="o">{</span>
	<span class="nc">Light</span> <span class="n">light</span><span class="o">;</span>
	<span class="kt">int</span> <span class="n">level</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">LightOnCommand</span><span class="o">(</span><span class="nc">Light</span> <span class="n">light</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">light</span> <span class="o">=</span> <span class="n">light</span><span class="o">;</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">level</span> <span class="o">=</span> <span class="n">light</span><span class="o">.</span><span class="na">getLevel</span><span class="o">();</span>
		<span class="n">light</span><span class="o">.</span><span class="na">on</span><span class="o">();</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">undo</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">light</span><span class="o">.</span><span class="na">dim</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">RemoteControlWithUndo</span> <span class="n">remoteControl</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RemoteControlWithUndo</span><span class="o">();</span>
		<span class="nc">Light</span> <span class="n">livingRoomLight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Light</span><span class="o">(</span><span class="s">"Living Room"</span><span class="o">);</span>
		<span class="nc">LightOnCommand</span> <span class="n">livingRoomLightOn</span> <span class="o">=</span>  <span class="k">new</span> <span class="nc">LightOnCommand</span><span class="o">(</span><span class="n">livingRoomLight</span><span class="o">);</span>
		<span class="nc">LightOffCommand</span> <span class="n">livingRoomLightOff</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LightOffCommand</span><span class="o">(</span><span class="n">livingRoomLight</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">livingRoomLightOn</span><span class="o">,</span> <span class="n">livingRoomLightOff</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">onButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">offButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">remoteControl</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">undoButtonWasPushed</span><span class="o">();</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">offButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">onButtonWasPushed</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">remoteControl</span><span class="o">);</span>
		<span class="n">remoteControl</span><span class="o">.</span><span class="na">undoButtonWasPushed</span><span class="o">();</span>

	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for Command pattern]]></summary></entry><entry><title type="html">Factory pattern</title><link href="http://localhost:4000/fundamentals/patterns/patterns-factory/" rel="alternate" type="text/html" title="Factory pattern" /><published>2022-04-16T00:00:00-05:00</published><updated>2022-04-16T08:06:00-05:00</updated><id>http://localhost:4000/fundamentals/patterns/patterns-factory</id><content type="html" xml:base="http://localhost:4000/fundamentals/patterns/patterns-factory/"><![CDATA[<p>This is an example for implementation for factory pattern</p>

<h2 id="concept">concept</h2>

<p>All factory patter encapsulate object creation. The Factory
Method Patter encapsulates object creation by letting subclasses
decide what objects to create. Let’s check out these class diagrams to
see who the players are in this pattern</p>

<p>important:</p>
<ul>
  <li>simple factory is not considered a patterns</li>
</ul>

<p class="notice--info"><strong>Note:</strong> this is an example of factory patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the factory patter and how in the MainClass call all implemantationfor show usage, 
you can see the flexibility for use this structure in the problem for OOP on Pizzeria</p>

<h2 id="abstraccions">abstraccions</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PizzaStore</span> <span class="o">{</span>
 
	<span class="kd">abstract</span> <span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">);</span>
 
	<span class="kd">public</span> <span class="nc">Pizza</span> <span class="nf">orderPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">createPizza</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Making a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---"</span><span class="o">);</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">bake</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">cut</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">box</span><span class="o">();</span>
		<span class="k">return</span> <span class="n">pizza</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Pizza</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="nc">String</span> <span class="n">dough</span><span class="o">;</span>
	<span class="nc">String</span> <span class="n">sauce</span><span class="o">;</span>
	<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">toppings</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
 
	<span class="kt">void</span> <span class="nf">prepare</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Prepare "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Tossing dough..."</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adding sauce..."</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Adding toppings: "</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">topping</span> <span class="o">:</span> <span class="n">toppings</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"   "</span> <span class="o">+</span> <span class="n">topping</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
  
	<span class="kt">void</span> <span class="nf">bake</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Bake for 25 minutes at 350"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cut the pizza into diagonal slices"</span><span class="o">);</span>
	<span class="o">}</span>
  
	<span class="kt">void</span> <span class="nf">box</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Place pizza in official PizzaStore box"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">StringBuffer</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"---- "</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">" ----\n"</span><span class="o">);</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">dough</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">sauce</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">topping</span> <span class="o">:</span> <span class="n">toppings</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">display</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">topping</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">display</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PizzaStore</span> <span class="o">{</span>
 
	<span class="kd">abstract</span> <span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">);</span>
 
	<span class="kd">public</span> <span class="nc">Pizza</span> <span class="nf">orderPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">createPizza</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Making a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ---"</span><span class="o">);</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">bake</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">cut</span><span class="o">();</span>
		<span class="n">pizza</span><span class="o">.</span><span class="na">box</span><span class="o">();</span>
		<span class="k">return</span> <span class="n">pizza</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoPizzaStore</span> <span class="kd">extends</span> <span class="nc">PizzaStore</span> <span class="o">{</span>

	<span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
        	<span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">))</span> <span class="o">{</span>
            		<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleCheesePizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"veggie"</span><span class="o">))</span> <span class="o">{</span>
        	    	<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleVeggiePizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"clam"</span><span class="o">))</span> <span class="o">{</span>
        	    	<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStyleClamPizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"pepperoni"</span><span class="o">))</span> <span class="o">{</span>
            		<span class="k">return</span> <span class="k">new</span> <span class="nf">ChicagoStylePepperoniPizza</span><span class="o">();</span>
        	<span class="o">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYPizzaStore</span> <span class="kd">extends</span> <span class="nc">PizzaStore</span> <span class="o">{</span>

	<span class="nc">Pizza</span> <span class="nf">createPizza</span><span class="o">(</span><span class="nc">String</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleCheesePizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"veggie"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleVeggiePizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"clam"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStyleClamPizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"pepperoni"</span><span class="o">))</span> <span class="o">{</span>
			<span class="k">return</span> <span class="k">new</span> <span class="nf">NYStylePepperoniPizza</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoStyleCheesePizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">ChicagoStyleCheesePizza</span><span class="o">()</span> <span class="o">{</span> 
		<span class="n">name</span> <span class="o">=</span> <span class="s">"Chicago Style Deep Dish Cheese Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Extra Thick Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Plum Tomato Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shredded Mozzarella Cheese"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cutting the pizza into square slices"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChicagoStyleClamPizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="nf">ChicagoStyleClamPizza</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"Chicago Style Clam Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Extra Thick Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Plum Tomato Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shredded Mozzarella Cheese"</span><span class="o">);</span>
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Frozen Clams from Chesapeake Bay"</span><span class="o">);</span>
	<span class="o">}</span>
 
	<span class="kt">void</span> <span class="nf">cut</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cutting the pizza into square slices"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYStyleCheesePizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">NYStyleCheesePizza</span><span class="o">()</span> <span class="o">{</span> 
		<span class="n">name</span> <span class="o">=</span> <span class="s">"NY Style Sauce and Cheese Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Thin Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Marinara Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Grated Reggiano Cheese"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NYStyleClamPizza</span> <span class="kd">extends</span> <span class="nc">Pizza</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="nf">NYStyleClamPizza</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">name</span> <span class="o">=</span> <span class="s">"NY Style Clam Pizza"</span><span class="o">;</span>
		<span class="n">dough</span> <span class="o">=</span> <span class="s">"Thin Crust Dough"</span><span class="o">;</span>
		<span class="n">sauce</span> <span class="o">=</span> <span class="s">"Marinara Sauce"</span><span class="o">;</span>
 
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Grated Reggiano Cheese"</span><span class="o">);</span>
		<span class="n">toppings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Fresh Clams from Long Island Sound"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">PizzaStore</span> <span class="n">nyStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NYPizzaStore</span><span class="o">();</span>
		<span class="nc">PizzaStore</span> <span class="n">chicagoStore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChicagoPizzaStore</span><span class="o">();</span>
 
		<span class="nc">Pizza</span> <span class="n">pizza</span> <span class="o">=</span> <span class="n">nyStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Ethan ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
 
		<span class="n">pizza</span> <span class="o">=</span> <span class="n">chicagoStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"cheese"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Joel ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

		<span class="n">pizza</span> <span class="o">=</span> <span class="n">nyStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"clam"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Ethan ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
 
		<span class="n">pizza</span> <span class="o">=</span> <span class="n">chicagoStore</span><span class="o">.</span><span class="na">orderPizza</span><span class="o">(</span><span class="s">"clam"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Joel ordered a "</span> <span class="o">+</span> <span class="n">pizza</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>

	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for factory pattern]]></summary></entry><entry><title type="html">Decorator pattern</title><link href="http://localhost:4000/fundamentals/patterns/post-exclude-search/" rel="alternate" type="text/html" title="Decorator pattern" /><published>2022-04-14T00:00:00-05:00</published><updated>2022-04-14T08:06:00-05:00</updated><id>http://localhost:4000/fundamentals/patterns/post-exclude-search</id><content type="html" xml:base="http://localhost:4000/fundamentals/patterns/post-exclude-search/"><![CDATA[<p>This is an example for implementation for decorator patter</p>

<p class="notice--info"><strong>Note:</strong> this is an example od decorator patterns, its will be a series for implement all patterns in java / python / go</p>

<p>in the next classes you can see the implementation for apply the decorator patter and how in the MainClass 
you can see the flexibility for use this strcuture in the problem for OOP on Stabuzz coffe</p>

<p>abstraccions</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">();</span>
    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractCondiment</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Usage</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Blacktea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"???"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffeetea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"????"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Greentea</span> <span class="kd">extends</span> <span class="nc">AbstactBeverage</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"???"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Double</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lemon</span> <span class="kd">extends</span> <span class="nc">AbstractCondiment</span> <span class="o">{</span>
    <span class="nc">AbstactBeverage</span> <span class="n">abstactBeverage</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Lemon</span><span class="o">(</span><span class="nc">AbstactBeverage</span> <span class="n">abstactBeverage</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">abstactBeverage</span><span class="o">=</span>  <span class="n">abstactBeverage</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">abstactBeverage</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">"??????"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Double</span> <span class="nf">cost</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">abstactBeverage</span><span class="o">.</span><span class="na">cost</span><span class="o">()+</span><span class="mi">11</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Blacktea</span> <span class="n">blacktea</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Blacktea</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"???=="</span><span class="o">+</span><span class="n">blacktea</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">",???"</span><span class="o">+</span><span class="n">blacktea</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
        <span class="nc">Lemon</span> <span class="n">lemon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Lemon</span><span class="o">(</span><span class="n">blacktea</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"???????????=="</span><span class="o">+</span><span class="n">lemon</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()+</span><span class="s">",???"</span><span class="o">+</span><span class="n">lemon</span><span class="o">.</span><span class="na">cost</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Dann brown</name><email>kintaroloop@gmail.com</email></author><category term="Fundamentals/patterns" /><summary type="html"><![CDATA[This is an example for implementation for decorator patter]]></summary></entry></feed>